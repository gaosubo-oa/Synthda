<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.equipment.EquipmentMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.equipment.Equipment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="EQUIP_ID" property="equipId" jdbcType="INTEGER" />
    <result column="EQUIP_NO" property="equipNo" jdbcType="VARCHAR" />
    <result column="EQUIP_NAME" property="equipName" jdbcType="VARCHAR" />
    <result column="EQUIP_TYPE_ID" property="equipTypeId" jdbcType="INTEGER" />
    <result column="DEPT_ID" property="deptId" jdbcType="INTEGER" />
    <result column="EQUIP_STATUAS_CODE" property="equipStatuasId" jdbcType="VARCHAR" />
    <result column="MODEL_NO" property="modelNo" jdbcType="VARCHAR" />
    <result column="SPEC" property="spec" jdbcType="VARCHAR" />
    <result column="ASSETS_COST" property="assetsCost" jdbcType="VARCHAR" />
    <result column="MANUFACTURER" property="manufacturer" jdbcType="VARCHAR" />
    <result column="SUPPLIER" property="supplier" jdbcType="VARCHAR" />
<!--
    <result column="PROPERTY_NO" property="propertyNo" jdbcType="VARCHAR" />
-->
    <result column="FACTORY_NO" property="factoryNo" jdbcType="VARCHAR" />
    <result column="DATE_PRODUC" property="dateProduc" jdbcType="TIMESTAMP" />
    <result column="RECORD_DATE" property="recordDate" jdbcType="TIMESTAMP" />
    <result column="POSITION_ID" property="positionId" jdbcType="INTEGER" />
    <result column="PROPERTY_CODE" property="propertyId" jdbcType="VARCHAR" />
    <result column="SOURCE_ASSETS" property="sourceAssets" jdbcType="VARCHAR" />
    <result column="ACCOUNT_FILE" property="accountFile" jdbcType="VARCHAR" />
    <!-- <result column="CHECK_DIFF" property="checkDiff" jdbcType="VARCHAR" />-->
    <result column="TECHNICAL_PARM" property="technicalParm" jdbcType="VARCHAR" />
    <result column="SENSITIVITY_X" property="sensitivityX" jdbcType="VARCHAR" />
    <result column="SENSITIVITY_Y" property="sensitivityY" jdbcType="VARCHAR" />
    <result column="SENSITIVITY_Z" property="sensitivityZ" jdbcType="VARCHAR" />
    <result column="PHY_QUANTI_ID" property="phyQuantiId" jdbcType="VARCHAR" />
    <result column="COUPLING_ID" property="couplingId" jdbcType="VARCHAR" />
    <result column="DIRECTION_ID" property="directionId" jdbcType="VARCHAR" />
    <result column="CLOUD_SN" property="cloudSn" jdbcType="VARCHAR" />
    <result column="CUSTODIAN" property="custodian" jdbcType="VARCHAR" />
    <result column="STAND_MATE_YN" property="standMateYn" jdbcType="CHAR" />
    <result column="MEMO" property="memo" jdbcType="VARCHAR" />
    <!--对应设备类型表中的设备名称和位置表中位置名称字段   TEST_POINTS\POINT_NAME是测量点的属性，用于模板数据拼凑-->
    <result column="EQUIP_TYPE_NAME" property="equipTypeName" jdbcType="VARCHAR" />
    <result column="POSITION_NAME" property="positionName" jdbcType="VARCHAR" />
    <result column="EQUIP_TYPE_CODE" property="equipTypeCode" jdbcType="VARCHAR" />
    <result column="DEPT_NAME" property="deptName" jdbcType="VARCHAR" />
    <result column="EQUIP_RECOMM" property="equipRecomm" jdbcType="INTEGER"/>
    <result column="TEST_POINTS" property="testPoints" jdbcType="INTEGER"/>
    <result column="POINT_NAME" property="pointName" jdbcType="INTEGER"/>
  </resultMap>

  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    EQUIP_ID, EQUIP_NO, EQUIP_NAME, EQUIP_TYPE_ID, DEPT_ID, EQUIP_STATUAS_CODE, MODEL_NO,
    SPEC, ASSETS_COST, MANUFACTURER, SUPPLIER,/* PROPERTY_NO,*/ FACTORY_NO, DATE_PRODUC,
    RECORD_DATE, POSITION_ID, PROPERTY_CODE, SOURCE_ASSETS, ACCOUNT_FILE, TECHNICAL_PARM,
    SENSITIVITY_X,SENSITIVITY_Y,SENSITIVITY_Z, PHY_QUANTI_ID, COUPLING_ID, DIRECTION_ID, CLOUD_SN, CUSTODIAN, STAND_MATE_YN,
    MEMO
  </sql>


  <sql id="Base_Column_Listnew">
     le.EQUIP_ID,
	le.POSITION_ID,
	le.CLOUD_SN,
	le.EQUIP_TYPE_ID,
	le.EQUIP_NAME,
	le.FACTORY_NO,
	let.EQUIP_TYPE_CODE,
/*	le.PROPERTY_NO,*/
	let.EQUIP_TYPE_NAME,
	le.SENSITIVITY_X,
	le.SENSITIVITY_Y,
	le.SENSITIVITY_Z,
	le.MODEL_NO,
	ldl.POSITION_NAME,
	EQUIP_RECOMM
  </sql>

  <select id="selectAllEquipment" resultMap="BaseResultMap" parameterType="map">
    SELECT
    le.*,
    let.EQUIP_TYPE_NAME,
    lde.DEPT_NAME,
    ldl.POSITION_NAME
    FROM
    lims_equipment le
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    LEFT JOIN department lde ON le.DEPT_ID = lde.DEPT_ID
    LEFT JOIN lims_dept_location ldl ON le.POSITION_ID=ldl.POSITION_ID
    where 1=1
    <if test="equipTypeId != null and ''!=equipTypeId" >
      AND le.EQUIP_TYPE_ID=#{equipTypeId}
    </if>
    <if test="typeIds !=null">
      and le.EQUIP_TYPE_ID in
      <foreach collection="typeIds" item="equipTypeId" index="index" open="(" close=")" separator=",">
        #{equipTypeId}
      </foreach>
    </if>
    <if test="deptExps!=null and ''!= deptExps ">
      and le.DEPT_ID in
      <foreach collection="deptExps" item="deptExp" index="index" open="(" separator="," close=")">
        #{deptExp}
      </foreach>
    </if>
    <if test="deptId!=null">
      and le.DEPT_ID=#{deptId}
    </if>
    <if test="equipStatuasId!=null">
      and le.EQUIP_STATUAS_CODE != #{equipStatuasId}
    </if>
    <if test="inptext != null and inptext!=''">
      AND  ${column} like CONCAT('%',#{inptext},'%')
    </if>
    <if test="smcolums != null and smcolums != ''">
      AND ${column} IN
      <foreach collection="columsValue" item="smcolums" open="(" close=")" separator="," index="index">
        #{smcolums}
      </foreach>
    </if>
    <if test="foreachColumn != null and foreachColumn != ''">
      AND ${searchcloumn} IN
      <foreach collection="searchValue" item="smcolums" open="(" close=")" separator="," index="index">
        #{smcolums}
      </foreach>
    </if>
    <if test="foreachColumn == null and searchcloumn!=null and searchcloumn!=''">
      AND  ${searchcloumn} like CONCAT('%',#{searchValue},'%')
    </if>
    order by
    EQUIP_ID desc
  </select>

  <select id="countAllEquipment" resultType="java.lang.Integer" parameterType="map">
    select count(EQUIP_ID) total from lims_equipment where 1=1
    <if test="equipTypeId != null and ''!=equipTypeId" >
      AND EQUIP_TYPE_ID=#{equipTypeId}
    </if>
    <if test="typeIds !=null">
      and EQUIP_TYPE_ID in
      <foreach collection="typeIds" item="equipTypeId" index="index" open="(" close=")" separator=",">
        #{equipTypeId}
      </foreach>
    </if>
    <if test="deptExps!=null and ''!= deptExps ">
      and DEPT_ID in
      <foreach collection="deptExps" item="deptExp" index="index" open="(" separator="," close=")">
        #{deptExp}
      </foreach>
    </if>
    <if test="deptId!=null">
      and DEPT_ID=#{deptId}
    </if>
    <if test="inptext != null and inptext!=''">
      AND  ${column} like CONCAT('%',#{inptext},'%')
    </if>
    <if test="smcolums != null and smcolums != ''">
      AND ${column} IN
      <foreach collection="columsValue" item="smcolums" open="(" close=")" separator="," index="index">
        #{smcolums}
      </foreach>
    </if>
    <if test="foreachColumn != null and foreachColumn != ''">
      AND ${searchcloumn} IN
      <foreach collection="searchValue" item="smcolums" open="(" close=")" separator="," index="index">
        #{smcolums}
      </foreach>
    </if>
    <if test="foreachColumn == null and searchcloumn!=null and searchcloumn!=''">
      AND  ${searchcloumn} like CONCAT('%',#{searchValue},'%')
    </if>
  </select>

  <select id="selectByEquipTypeId" resultMap="BaseResultMap" parameterType="integer">
    select
    <include refid="Base_Column_List"/>
    from lims_equipment
    where EQUIP_TYPE_ID = #{equipTypeId,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from lims_equipment
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from lims_equipment
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xoa.model.equipment.Equipment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lims_equipment (EQUIP_ID, EQUIP_NO, EQUIP_NAME,
    EQUIP_TYPE_ID, DEPT_ID, EQUIP_STATUAS_CODE,
    MODEL_NO, SPEC, ASSETS_COST,
    MANUFACTURER, SUPPLIER,/* PROPERTY_NO,*/
    FACTORY_NO, DATE_PRODUC, RECORD_DATE,
    POSITION_ID, PROPERTY_CODE, SOURCE_ASSETS,
    ACCOUNT_FILE, TECHNICAL_PARM,
    SENSITIVITY_X,,SENSITIVITY_Y,SENSITIVITY_Z, PHY_QUANTI_ID, COUPLING_ID,
    DIRECTION_ID, CLOUD_SN, CUSTODIAN,
    STAND_MATE_YN, MEMO)
    values (#{equipId,jdbcType=VARCHAR}, #{equipNo,jdbcType=VARCHAR}, #{equipName,jdbcType=VARCHAR},
    #{equipTypeId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, #{equipStatuasId,jdbcType=VARCHAR},
    #{modelNo,jdbcType=VARCHAR}, #{spec,jdbcType=VARCHAR}, #{assetsCost,jdbcType=VARCHAR},
    #{manufacturer,jdbcType=VARCHAR}, #{supplier,jdbcType=VARCHAR}, /*#{propertyNo,jdbcType=VARCHAR},*/
    #{factoryNo,jdbcType=VARCHAR}, #{dateProduc,jdbcType=TIMESTAMP}, #{recordDate,jdbcType=TIMESTAMP},
    #{positionId,jdbcType=INTEGER}, #{propertyId,jdbcType=VARCHAR}, #{sourceAssets,jdbcType=VARCHAR},
    #{accountFile,jdbcType=VARCHAR}, #{technicalParm,jdbcType=VARCHAR},
    #{sensitivityX,jdbcType=VARCHAR},#{sensitivityY,jdbcType=VARCHAR},#{sensitivityZ,jdbcType=VARCHAR}, #{phyQuantiId,jdbcType=VARCHAR}, #{couplingId,jdbcType=VARCHAR},
    #{directionId,jdbcType=VARCHAR}, #{cloudSn,jdbcType=VARCHAR}, #{custodian,jdbcType=VARCHAR},
    #{standMateYn,jdbcType=CHAR}, #{memo,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.equipment.Equipment" keyProperty="equipId" useGeneratedKeys="true" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lims_equipment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="equipId != null" >
        EQUIP_ID,
      </if>
      <if test="equipNo != null" >
        EQUIP_NO,
      </if>
      <if test="equipName != null" >
        EQUIP_NAME,
      </if>
      <if test="equipTypeId != null" >
        EQUIP_TYPE_ID,
      </if>
      <if test="deptId != null" >
        DEPT_ID,
      </if>
      <if test="equipStatuasId != null" >
        EQUIP_STATUAS_CODE,
      </if>
      <if test="modelNo != null" >
        MODEL_NO,
      </if>
      <if test="spec != null" >
        SPEC,
      </if>
      <if test="assetsCost != null" >
        ASSETS_COST,
      </if>
      <if test="manufacturer != null" >
        MANUFACTURER,
      </if>
      <if test="supplier != null" >
        SUPPLIER,
      </if>
     <!-- <if test="propertyNo != null" >
        PROPERTY_NO,
      </if>-->
      <if test="factoryNo != null" >
        FACTORY_NO,
      </if>
      <if test="dateProduc != null" >
        DATE_PRODUC,
      </if>
      <if test="recordDate != null" >
        RECORD_DATE,
      </if>
      <if test="positionId != null" >
        POSITION_ID,
      </if>
      <if test="propertyId != null" >
        PROPERTY_CODE,
      </if>
      <if test="sourceAssets != null" >
        SOURCE_ASSETS,
      </if>
      <if test="accountFile != null" >
        ACCOUNT_FILE,
      </if>
      <if test="technicalParm != null" >
        TECHNICAL_PARM,
      </if>
      <if test="sensitivityX != null" >
        SENSITIVITY_X,
      </if>
      <if test="sensitivityY != null" >
        SENSITIVITY_Y,
      </if>
      <if test="sensitivityZ != null" >
        SENSITIVITY_Z,
      </if>
      <if test="phyQuantiId != null" >
        PHY_QUANTI_ID,
      </if>
      <if test="couplingId != null" >
        COUPLING_ID,
      </if>
      <if test="directionId != null" >
        DIRECTION_ID,
      </if>
      <if test="cloudSn != null" >
        CLOUD_SN,
      </if>
      <if test="custodian != null" >
        CUSTODIAN,
      </if>
      <if test="standMateYn != null" >
        STAND_MATE_YN,
      </if>
      <if test="memo != null" >
        MEMO,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="equipId != null" >
        #{equipId,jdbcType=VARCHAR},
      </if>
      <if test="equipNo != null" >
        #{equipNo,jdbcType=VARCHAR},
      </if>
      <if test="equipName != null" >
        #{equipName,jdbcType=VARCHAR},
      </if>
      <if test="equipTypeId != null" >
        #{equipTypeId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="equipStatuasId != null" >
        #{equipStatuasId,jdbcType=VARCHAR},
      </if>
      <if test="modelNo != null" >
        #{modelNo,jdbcType=VARCHAR},
      </if>
      <if test="spec != null" >
        #{spec,jdbcType=VARCHAR},
      </if>
      <if test="assetsCost != null" >
        #{assetsCost,jdbcType=VARCHAR},
      </if>
      <if test="manufacturer != null" >
        #{manufacturer,jdbcType=VARCHAR},
      </if>
      <if test="supplier != null" >
        #{supplier,jdbcType=VARCHAR},
      </if>
      <!--<if test="propertyNo != null" >
        #{propertyNo,jdbcType=VARCHAR},
      </if>-->
      <if test="factoryNo != null" >
        #{factoryNo,jdbcType=VARCHAR},
      </if>
      <if test="dateProduc != null" >
        #{dateProduc,jdbcType=TIMESTAMP},
      </if>
      <if test="recordDate != null" >
        #{recordDate,jdbcType=TIMESTAMP},
      </if>
      <if test="positionId != null" >
        #{positionId,jdbcType=INTEGER},
      </if>
      <if test="propertyId != null" >
        #{propertyId,jdbcType=VARCHAR},
      </if>
      <if test="sourceAssets != null" >
        #{sourceAssets,jdbcType=VARCHAR},
      </if>
      <if test="accountFile != null" >
        #{accountFile,jdbcType=VARCHAR},
      </if>
      <if test="technicalParm != null" >
        #{technicalParm,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityX != null" >
        #{sensitivityX,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityY != null" >
        #{sensitivityY,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityZ != null" >
        #{sensitivityZ,jdbcType=VARCHAR},
      </if>
      <if test="phyQuantiId != null" >
        #{phyQuantiId,jdbcType=VARCHAR},
      </if>
      <if test="couplingId != null" >
        #{couplingId,jdbcType=VARCHAR},
      </if>
      <if test="directionId != null" >
        #{directionId,jdbcType=VARCHAR},
      </if>
      <if test="cloudSn != null" >
        #{cloudSn,jdbcType=VARCHAR},
      </if>
      <if test="custodian != null" >
        #{custodian,jdbcType=VARCHAR},
      </if>
      <if test="standMateYn != null" >
        #{standMateYn,jdbcType=CHAR},
      </if>
      <if test="memo != null" >
        #{memo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.equipment.Equipment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lims_equipment
    <set >
      <if test="equipNo != null and ''!=equipNo" >
        EQUIP_NO = #{equipNo,jdbcType=VARCHAR},
      </if>
      <if test="equipName != null and ''!=equipName" >
        EQUIP_NAME = #{equipName,jdbcType=VARCHAR},
      </if>
      <if test="equipTypeId != null and ''!=equipTypeId" >
        EQUIP_TYPE_ID = #{equipTypeId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null and ''!=deptId" >
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="equipStatuasId != null and ''!=equipStatuasId" >
        EQUIP_STATUAS_CODE = #{equipStatuasId,jdbcType=VARCHAR},
      </if>
      <if test="modelNo != null and ''!=modelNo" >
        MODEL_NO = #{modelNo,jdbcType=VARCHAR},
      </if>
      <if test="spec != null and ''!=spec" >
        SPEC = #{spec,jdbcType=VARCHAR},
      </if>
      <if test="assetsCost != null and ''!=assetsCost" >
        ASSETS_COST = #{assetsCost,jdbcType=VARCHAR},
      </if>
      <if test="manufacturer != null and ''!=manufacturer" >
        MANUFACTURER = #{manufacturer,jdbcType=VARCHAR},
      </if>
      <if test="supplier != null and ''!=supplier" >
        SUPPLIER = #{supplier,jdbcType=VARCHAR},
      </if>
     <!-- <if test="propertyNo != null and ''!=propertyNo" >
        PROPERTY_NO = #{propertyNo,jdbcType=VARCHAR},
      </if>-->
      <if test="factoryNo != null and ''!=factoryNo" >
        FACTORY_NO = #{factoryNo,jdbcType=VARCHAR},
      </if>
      <if test="dateProduc != null and ''!=dateProduc" >
        DATE_PRODUC = #{dateProduc,jdbcType=TIMESTAMP},
      </if>
      <if test="recordDate != null and ''!=recordDate" >
        RECORD_DATE = #{recordDate,jdbcType=TIMESTAMP},
      </if>
      <if test="positionId != null and ''!=positionId" >
        POSITION_ID = #{positionId,jdbcType=INTEGER},
      </if>
      <if test="propertyId != null and ''!=propertyId" >
        PROPERTY_CODE = #{propertyId,jdbcType=VARCHAR},
      </if>
      <if test="sourceAssets != null and ''!=sourceAssets" >
        SOURCE_ASSETS = #{sourceAssets,jdbcType=VARCHAR},
      </if>
      <if test="accountFile != null and ''!=accountFile" >
        ACCOUNT_FILE = #{accountFile,jdbcType=VARCHAR},
      </if>
      <if test="technicalParm != null and ''!=technicalParm" >
        TECHNICAL_PARM = #{technicalParm,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityX != null and ''!=sensitivityX" >
        SENSITIVITY_X = #{sensitivityX,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityY != null and ''!=sensitivityY" >
        SENSITIVITY_Y = #{sensitivityY,jdbcType=VARCHAR},
      </if>
      <if test="sensitivityZ!= null and ''!=sensitivityZ" >
        SENSITIVITY_Z = #{sensitivityZ,jdbcType=VARCHAR},
      </if>
      <if test="phyQuantiId != null and ''!=phyQuantiId" >
        PHY_QUANTI_ID = #{phyQuantiId,jdbcType=VARCHAR},
      </if>
      <if test="couplingId != null and ''!=couplingId" >
        COUPLING_ID = #{couplingId,jdbcType=VARCHAR},
      </if>
      <if test="directionId != null and ''!=directionId" >
        DIRECTION_ID = #{directionId,jdbcType=VARCHAR},
      </if>
      <if test="cloudSn != null and ''!=cloudSn" >
        CLOUD_SN = #{cloudSn,jdbcType=VARCHAR},
      </if>
      <if test="custodian != null and ''!=custodian" >
        CUSTODIAN = #{custodian,jdbcType=VARCHAR},
      </if>
      <if test="standMateYn != null and ''!=standMateYn" >
        STAND_MATE_YN = #{standMateYn,jdbcType=CHAR},
      </if>
      <if test="memo != null and ''!=memo" >
        MEMO = #{memo,jdbcType=VARCHAR},
      </if>
    </set>
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.equipment.Equipment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lims_equipment
    set EQUIP_NO = #{equipNo,jdbcType=VARCHAR},
    EQUIP_NAME = #{equipName,jdbcType=VARCHAR},
    EQUIP_TYPE_ID = #{equipTypeId,jdbcType=INTEGER},
    DEPT_ID = #{deptId,jdbcType=INTEGER},
    EQUIP_STATUAS_CODE = #{equipStatuasId,jdbcType=VARCHAR},
    MODEL_NO = #{modelNo,jdbcType=VARCHAR},
    SPEC = #{spec,jdbcType=VARCHAR},
    ASSETS_COST = #{assetsCost,jdbcType=VARCHAR},
    MANUFACTURER = #{manufacturer,jdbcType=VARCHAR},
    SUPPLIER = #{supplier,jdbcType=VARCHAR},
/*    PROPERTY_NO = #{propertyNo,jdbcType=VARCHAR},*/
    FACTORY_NO = #{factoryNo,jdbcType=VARCHAR},
    DATE_PRODUC = #{dateProduc,jdbcType=TIMESTAMP},
    RECORD_DATE = #{recordDate,jdbcType=TIMESTAMP},
    POSITION_ID = #{positionId,jdbcType=INTEGER},
    PROPERTY_CODE = #{propertyId,jdbcType=VARCHAR},
    SOURCE_ASSETS = #{sourceAssets,jdbcType=VARCHAR},
    ACCOUNT_FILE = #{accountFile,jdbcType=VARCHAR},
    TECHNICAL_PARM = #{technicalParm,jdbcType=VARCHAR},
    SENSITIVITY_X = #{sensitivityX,jdbcType=VARCHAR},
    SENSITIVITY_Y = #{sensitivityY,jdbcType=VARCHAR},
    SENSITIVITY_Z = #{sensitivityZ,jdbcType=VARCHAR},
    PHY_QUANTI_ID = #{phyQuantiId,jdbcType=VARCHAR},
    COUPLING_ID = #{couplingId,jdbcType=VARCHAR},
    DIRECTION_ID = #{directionId,jdbcType=VARCHAR},
    CLOUD_SN = #{cloudSn,jdbcType=VARCHAR},
    CUSTODIAN = #{custodian,jdbcType=VARCHAR},
    STAND_MATE_YN = #{standMateYn,jdbcType=CHAR},
    MEMO = #{memo,jdbcType=VARCHAR}
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </update>

  <!--  /**
    * 创建作者:   李 然
    * 创建日期:   18:18 2019/8/8
    * 方法介绍:   根据证书检索可添加设备
    * 参数说明:   * @param map
    * @return     java.util.List<com.xoa.lims.equipmentEquipment>
    */
    List<Equipment> findEquipmentByEquipCert(Map map);-->
  <select id="findEquipmentByEquipCert" parameterType="map" resultMap="BaseResultMap">
    SELECT
    EQUIP_ID,EQUIP_NO,EQUIP_NAME,MODEL_NO,FACTORY_NO
    FROM
    lims_equipment
    WHERE
    DEPT_ID = #{equipCert.deptId}
    <if test="equipIds!=null">
      AND EQUIP_ID NOT IN
      <foreach collection="equipIds" item="equipId" close=")" open="(" index="index" separator=",">
        #{equipId}
      </foreach>
    </if>
    and EQUIP_STATUAS_CODE!="EQUIP_SCRAPPED"
    and EQUIP_STATUAS_CODE!="EQUIP_LEND"
  </select>
  <!--查询主设备TEST_EQUIP类型下所关联的表-->
  <!---->
  <select id="equipList" resultMap="BaseResultMap">
    SELECT
    *
    FROM
    (
    SELECT
    <include refid="Base_Column_Listnew"/>
    FROM
    lims_equipment le
    LEFT JOIN lims_dept_location ldl ON le.POSITION_ID = ldl.POSITION_ID
    LEFT JOIN lims_proj_task_equiplist lpte ON le.EQUIP_ID = lpte.EQUIP_ID
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    WHERE
    1 = 1
    AND let.EQUIP_TYPE_ID IN (
    SELECT
    lett.EQUIP_TYPE_ID
    FROM
    lims_equip_types lett
    WHERE
    lett.EQUIP_TYPE_PID IN ( SELECT let.EQUIP_TYPE_ID FROM lims_equip_types let WHERE let.EQUIP_TYPE_CODE = 'TEST_EQUIP' )
    )
    AND le.EQUIP_STATUAS_CODE IN ( 'EQUIP_INTACT', 'EQUIP_OCCUPY' )
    AND le.DEPT_ID = #{deptId}

    <if test="projectId!=null">
      and  lpte.PROJECT_ID=#{projectId}
    </if>



    UNION ALL
    SELECT
    le.EQUIP_ID,
    le.POSITION_ID,
    le.CLOUD_SN,
    le.EQUIP_TYPE_ID,
    le.EQUIP_NAME,
    le.FACTORY_NO,
    let.EQUIP_TYPE_CODE,
/*    le.PROPERTY_NO,*/
    let.EQUIP_TYPE_NAME,
    le.SENSITIVITY_X,
    le.SENSITIVITY_Y,
    le.SENSITIVITY_Z,
    le.MODEL_NO,
    ldl.POSITION_NAME,
    NULL AS EQUIP_RECOMM
    FROM
    lims_equipment le
    LEFT JOIN lims_dept_location ldl ON le.POSITION_ID = ldl.POSITION_ID
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    WHERE
    1 = 1
    AND let.EQUIP_TYPE_ID IN (
    SELECT
    lett.EQUIP_TYPE_ID
    FROM
    lims_equip_types lett
    WHERE
    lett.EQUIP_TYPE_PID IN ( SELECT let.EQUIP_TYPE_ID FROM lims_equip_types let WHERE let.EQUIP_TYPE_CODE IN ( 'SENSOR', 'INSTRUMENT' ) )
    )
    AND le.EQUIP_STATUAS_CODE IN ( 'EQUIP_INTACT', 'EQUIP_OCCUPY' )
    AND le.DEPT_ID = #{deptId}
    ) a
    GROUP BY
    EQUIP_ID
    ORDER BY
    EQUIP_RECOMM,
    EQUIP_TYPE_ID
  </select>


  <!--//lr 根据设备编号和当前结算组织获取设备
  List<Equipment> getEquipByTypeNoAndExpId(Map map);-->
  <select id="getEquipByTypeNoAndExpId" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM
    lims_equipment
    WHERE
    EQUIP_TYPE_ID = ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_CODE=#{typeNo})
    and DEPT_ID=#{deptId}
  </select>

  <select id="getInfoByEquipId" parameterType="map" resultMap="BaseResultMap">
    SELECT
    le.*,
    let.EQUIP_TYPE_NAME
    FROM
    lims_equipment le
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    WHERE
    EQUIP_ID IN
    <foreach collection="equipIds" item="equipId" index="index" separator="," open="(" close=")">
      #{equipId}
    </foreach>
  </select>

  <!-- 通过设备类型id查询设备并分页 -->
  <select id="selectByEquipTypeIdAndDeptIdAndPaging" resultMap="BaseResultMap" parameterType="map">
    SELECT
    <include refid="Base_Column_List" />
    FROM
    lims_equipment
    WHERE
    EQUIP_TYPE_ID = #{equipTypeId}
    and
    DEPT_ID = #{deptId}
  </select>

  <select id="resultCode" parameterType="integer" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    lims_equipment
    WHERE
    EQUIP_STATUAS_CODE = 'EQUIP_LEND'
    AND EQUIP_ID IN ( SELECT EQUIP_ID FROM lims_equip_lendlist WHERE LEND_ID = #{lendIds} )
  </select>

  <select id="getdistant" resultMap="BaseResultMap" parameterType="integer">
    SELECT
    distinct(DEPT_ID) DEPT_ID
    FROM
    lims_equipment
    WHERE
    EQUIP_ID IN ( SELECT EQUIP_ID FROM lims_equip_lendlist WHERE LEND_ID = #{lendIds} )
  </select>

  <update id="updateEquipinventory" parameterType="com.xoa.model.equipment.LimsEquipInventory" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lims_equipment
    <set >
      <if test="equipNo != null and ''!=equipNo" >
        EQUIP_NO = #{equipNo,jdbcType=VARCHAR},
      </if>
      <if test="equipName != null and ''!=equipName" >
        EQUIP_NAME = #{equipName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null and ''!=deptId" >
        DEPT_ID = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="modelNo != null and ''!=modelNo" >
        MODEL_NO = #{modelNo,jdbcType=VARCHAR},
      </if>
      <if test="assetsCost != null and ''!=assetsCost" >
        ASSETS_COST = #{assetsCost,jdbcType=VARCHAR},
      </if>
      <if test="manufacturer != null and ''!=manufacturer" >
        MANUFACTURER = #{manufacturer,jdbcType=VARCHAR},
      </if>
      <if test="supplier != null and ''!=supplier" >
        SUPPLIER = #{supplier,jdbcType=VARCHAR},
      </if>
      <if test="factoryNo != null and ''!=factoryNo" >
        FACTORY_NO = #{factoryNo,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null and ''!=positionId" >
        POSITION_ID = #{positionId,jdbcType=INTEGER},
      </if>
    </set>
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </update>

  <!--//查找温湿度采集所需设备
  List<Equipment> getEquips(Map map);-->
  <select id="getEquips" parameterType="map" resultMap="BaseResultMap">

    SELECT
        le.*
    FROM
        lims_process_b_usedequip lpbu
        LEFT JOIN lims_equipment le ON lpbu.EQUIP_ID = le.EQUIP_ID
    WHERE
        STEPS_EXE_CODE = #{stepsExeCode}
        AND le.EQUIP_TYPE_ID IN ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_PID = ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_CODE = "TEST_EQUIP" ) )
  </select>

  <select id="findPointEquip" resultMap="BaseResultMap" parameterType="map">
    SELECT DISTINCT le.EQUIP_ID,le.EQUIP_NAME,le.DIRECTION_ID,le.EQUIP_NO,let.EQUIP_TYPE_CODE
    from lims_equipment le
    LEFT JOIN lims_process_b_usedequip lu ON lu.EQUIP_ID=le.EQUIP_ID
    LEFT JOIN lims_equip_types let ON let.EQUIP_TYPE_ID=le.EQUIP_TYPE_ID

    where lu.PROJECT_ID=#{projectId} and lu.EX_GROUP=#{exGroup}
    and le.EQUIP_TYPE_ID in
    <foreach collection="typeIds" item="equipTypeId" separator="," index="index" open="(" close=")">
      #{equipTypeId}
    </foreach>
  </select>


  <!-- 根据下拉框条件以及输入参数模糊查询 字段 值-->
  <select id="selectEquipByField" resultMap="BaseResultMap" parameterType="map">
    select
    b.EQUIP_ID,b.EQUIP_NO,b.EQUIP_STATUAS_CODE,b.PROPERTY_CODE as propertyId,b.EQUIP_NAME,b.EQUIP_TYPE_ID,b.DEPT_ID,b.MODEL_NO,b.SPEC,a.code_tyep_name as codeName,b.MANUFACTURER,b.SUPPLIER,b.FACTORY_NO
    from lims_equipment b
    LEFT join lims_common_code a
    on a.code_tyep_no = b.EQUIP_STATUAS_CODE

    <where>
      <if test="fieldName!=null and fieldValue!=null and fieldName!=''">
        ${fieldName} like "%"#{fieldValue}"%"
      </if>
      <if test="equipTypeId!=null and equipTypeId !=''">
        and equip_Type_Id = #{equipTypeId}
      </if>
    </where>

  </select>

  <select id="getEquipInfoByequipId" resultMap="BaseResultMap">
  select EQUIP_ID,EQUIP_NAME,EQUIP_STATUAS_CODE,MODEL_NO,SPEC,EQUIP_NO,FACTORY_NO,a.EQUIP_TYPE_ID,b.EQUIP_TYPE_NAME
  from lims_equipment a
  LEFT JOIN lims_equip_types b ON a.EQUIP_TYPE_ID = b.EQUIP_TYPE_ID
  where equip_id=#{equipId}
  </select>

  <select id="selectByEquipTypeIdAndDeptId" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List"/>
    from lims_equipment
    where
    EQUIP_TYPE_ID = #{equipTypeId}
    and
    DEPT_ID=#{deptId}
  </select>

  <select id="msgjsp" resultMap="BaseResultMap" parameterType="map">
    select
    le.EQUIP_ID,
	le.POSITION_ID,
	le.CLOUD_SN,
	le.EQUIP_TYPE_ID,
	le.EQUIP_NAME,
	le.FACTORY_NO,
	let.EQUIP_TYPE_CODE,
/*	le.PROPERTY_NO,*/
	let.EQUIP_TYPE_NAME,
	le.SENSITIVITY_X,
	le.SENSITIVITY_Y,
	le.SENSITIVITY_Z
     from lims_equipment le,lims_proj_task_equiplist lpte WHERE lpte.EQUIP_ID = le.EQUIP_ID AND  le.EQUIP_ID=#{equipId} and PROJECT_ID=#{projectId} AND lpte.EQUIP_RECOMM=1
  </select>

  <select id="checkPosition" parameterType="integer" resultType="int">
    SELECT  count(*) from lims_equipment where POSITION_ID=#{positionId}
  </select>

  <select id="selectAllEqip" parameterType="java.util.Map" resultMap="BaseResultMap">
    SELECT lims_equipment.*  FROM lims_equipment left join lims_equip_types on lims_equipment.EQUIP_TYPE_ID =lims_equip_types.EQUIP_TYPE_ID
    <where>
      <if test="deptId!=null">
        and  DEPT_ID=#{deptId}
      </if>
      <if test="typeIds !=null and ''!=typeIds">
        and lims_equipment.EQUIP_TYPE_ID in
        <foreach collection="typeIds" item="equipTypeId" index="index" open="(" close=")" separator=",">
          #{equipTypeId}
        </foreach>
      </if>
      <if test="equipTypeId">
        and  lims_equipment.EQUIP_TYPE_ID=#{equipTypeId}
      </if>
      <if test="columnName!=null and columnName!='' and inputValue!=null and inputValue!=''">
        and ${columnName} like CONCAT('%',#{inputValue},'%')
      </if>
    </where>
  </select>
  <!--腾振模板070查询计划设备sql -->
  <select id="selectByStepExeCode" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    lims_equipment le
    LEFT JOIN lims_process_b_usedequip lpbu ON lpbu.EQUIP_ID = le.EQUIP_ID
    WHERE
    lpbu.STEPS_EXE_CODE = #{stepsExeCode}
    AND le.EQUIP_TYPE_ID IN ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_PID = ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_CODE = "TEST_EQUIP" ) )
  </select>
  <!--腾振110模板使用sql，查询传感器相关信息 -->
  <select id="selectByStatusExeCode" parameterType="map" resultMap="BaseResultMap">
    SELECT
        le.*,
        lpbp.TEST_POINTS,
	    lpbp.POINT_NAME
    FROM
        lims_process_b_point lpbp
        LEFT JOIN lims_equipment le ON lpbp.EQUIP_ID = le.EQUIP_ID
    WHERE
        lpbp.STATUS_EXE_CODE = #{statusExeCode}
        AND le.EQUIP_TYPE_ID IN ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_PID = ( SELECT EQUIP_TYPE_ID FROM lims_equip_types WHERE EQUIP_TYPE_CODE = "SENSOR" ) )
  </select>

  <select id="selectByIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from lims_equipment  where EQUIP_ID in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </select>
  <!--/设备报废申请 添加按钮 选择设备里的分页模糊查询/ -->
  <select id="selectEquipment" resultMap="BaseResultMap">
    select
    le.*,
    let.EQUIP_TYPE_NAME,
    lde.DEPT_NAME
    FROM
    lims_equipment le
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    LEFT JOIN department lde ON le.DEPT_ID = lde.DEPT_ID
    where 1=1
    <if test="fieldName != null">
      AND ${fieldName} like CONCAT('%',#{fieldValue},'%')
    </if>
    <if test="typeIds !=null and ''!=typeIds">
      and le.EQUIP_TYPE_ID in
      <foreach collection="typeIds" item="equipTypeId" index="index" open="(" close=")" separator=",">
        #{equipTypeId}
      </foreach>
    </if>
    <if test="deptId!=null">
      AND le.DEPT_ID=#{deptId}
    </if>
  </select>

  <select id="findAllTestEquip" resultMap="BaseResultMap">
    select
     *
    from
     lims_equipment equip
    where
     dept_id = #{deptId}
    and
      equip.equip_type_id
    IN ( SELECT equip_type_id FROM lims_equip_types WHERE equip_type_pid = ( SELECT equip_type_id FROM lims_equip_types WHERE equip_TYPE_code = "TEST_EQUIP" ) )
  </select>
  <select id="selectAtmoEnv" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    lims_equipment le
    LEFT JOIN lims_equip_types let ON le.EQUIP_TYPE_ID = let.EQUIP_TYPE_ID
    WHERE
    let.EQUIP_TYPE_CODE = "ATMO_ENV"
    AND le.DEPT_ID = #{deptId}
  </select>


  <select id="selectById" resultMap="BaseResultMap" >
    select lde.DEPT_NAME,le.* from lims_equipment le
    LEFT JOIN department lde ON le.DEPT_ID = lde.DEPT_ID
    where 1=1
    <if test="deptExps!=null and ''!= deptExps ">
      and le.DEPT_ID in
      <foreach collection="deptExps" item="deptExp" index="index" open="(" separator="," close=")">
        #{deptExp}
      </foreach>
    </if>
    <if test="inptext != null and inptext!=''">
      AND  ${column} like CONCAT('%',#{inptext},'%')
    </if>
  </select>

   <select id="selectByEquipId" resultMap="BaseResultMap">
     select  <include refid="Base_Column_List"/>FROM lims_equipment WHERE EQUIP_ID=#{equipId}
   </select>

  <update id="update" parameterType="com.xoa.model.equipment.Equipment" >
    update lims_equipment
    <set >
      <if test="positionId != null and ''!=positionId" >
        POSITION_ID = #{positionId,jdbcType=INTEGER},
      </if>
    </set>
    where EQUIP_ID = #{equipId,jdbcType=INTEGER}
  </update>


</mapper>