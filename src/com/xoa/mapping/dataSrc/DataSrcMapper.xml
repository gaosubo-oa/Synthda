<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.dataSrc.DataSrcMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="d_id" property="dId" jdbcType="INTEGER" />
    <result column="d_name" property="dName" jdbcType="VARCHAR" />
    <result column="d_desc" property="dDesc" jdbcType="VARCHAR" />
    <result column="d_creator" property="dCreator" jdbcType="VARCHAR" />
    <result column="d_editor" property="dEditor" jdbcType="VARCHAR" />
    <result column="d_priv" property="dPriv" jdbcType="VARCHAR" />
    <result column="d_create_time" property="dCreateTime" jdbcType="TIMESTAMP" />
    <result column="d_edit_time" property="dEditTime" jdbcType="TIMESTAMP" />
    <result column="d_nmarking" property="dNmarking" jdbcType="VARCHAR" />
    <result column="d_nmarkingdesc" property="dNmarkingdesc" jdbcType="VARCHAR" />
    <result column="d_module_name" property="dModuleName" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xoa.model.dataSrc.DataSrc" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="d_dept" property="dDept" jdbcType="LONGVARCHAR" />
    <result column="datasize" property="datasize" jdbcType="VARCHAR" />
    <result column="tableName" property="tableName" jdbcType="VARCHAR" />
    <result column="tbrows" property="dataRow" jdbcType="VARCHAR" />

    <result column="data1" property="data1" jdbcType="VARCHAR" />
    <result column="data2" property="data2" jdbcType="VARCHAR" />
    <result column="data3" property="data3" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    d_id, d_name, d_desc, d_creator, d_editor, d_priv, d_create_time, d_edit_time
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    d_dept,d_nmarking,d_nmarkingdesc,d_module_name
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.xoa.model.dataSrc.DataSrcExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_src
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xoa.model.dataSrc.DataSrcExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from data_src
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_src
    where d_id = #{dId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from data_src
    where d_id = #{dId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xoa.model.dataSrc.DataSrcExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from data_src
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into data_src (d_id, d_name, d_desc, 
      d_creator, d_editor, d_priv, 
      d_create_time, d_edit_time, d_dept
      )
    values (#{dId,jdbcType=INTEGER}, #{dName,jdbcType=VARCHAR}, #{dDesc,jdbcType=VARCHAR}, 
      #{dCreator,jdbcType=VARCHAR}, #{dEditor,jdbcType=VARCHAR}, #{dPriv,jdbcType=VARCHAR}, 
      #{dCreateTime,jdbcType=TIMESTAMP}, #{dEditTime,jdbcType=TIMESTAMP}, #{dDept,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into data_src
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="dId != null" >
        d_id,
      </if>
      <if test="dName != null" >
        d_name,
      </if>
      <if test="dDesc != null" >
        d_desc,
      </if>
      <if test="dCreator != null" >
        d_creator,
      </if>
      <if test="dEditor != null" >
        d_editor,
      </if>
      <if test="dPriv != null" >
        d_priv,
      </if>
      <if test="dCreateTime != null" >
        d_create_time,
      </if>
      <if test="dEditTime != null" >
        d_edit_time,
      </if>
      <if test="dDept != null" >
        d_dept,
      </if>
      <if test="dNmarking != null" >
        d_nmarking,
      </if>
      <if test="dNmarkingdesc != null" >
        d_nmarkingdesc,
      </if>
      <if test="dModuleName != null" >
        d_module_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="dId != null" >
        #{dId,jdbcType=INTEGER},
      </if>
      <if test="dName != null" >
        #{dName,jdbcType=VARCHAR},
      </if>
      <if test="dDesc != null" >
        #{dDesc,jdbcType=VARCHAR},
      </if>
      <if test="dCreator != null" >
        #{dCreator,jdbcType=VARCHAR},
      </if>
      <if test="dEditor != null" >
        #{dEditor,jdbcType=VARCHAR},
      </if>
      <if test="dPriv != null" >
        #{dPriv,jdbcType=VARCHAR},
      </if>
      <if test="dCreateTime != null" >
        #{dCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dEditTime != null" >
        #{dEditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dDept != null" >
        #{dDept,jdbcType=LONGVARCHAR},
      </if>

      <if test="dNmarking != null" >
        #{dNmarking,jdbcType=VARCHAR},
      </if>
      <if test="dNmarkingdesc != null" >
        #{dNmarkingdesc,jdbcType=VARCHAR},
      </if>
      <if test="dModuleName != null" >
        #{dModuleName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xoa.model.dataSrc.DataSrcExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from data_src
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    <set >
      <if test="record.dId != null" >
        d_id = #{record.dId,jdbcType=INTEGER},
      </if>
      <if test="record.dName != null" >
        d_name = #{record.dName,jdbcType=VARCHAR},
      </if>
      <if test="record.dDesc != null" >
        d_desc = #{record.dDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.dCreator != null" >
        d_creator = #{record.dCreator,jdbcType=VARCHAR},
      </if>
      <if test="record.dEditor != null" >
        d_editor = #{record.dEditor,jdbcType=VARCHAR},
      </if>
      <if test="record.dPriv != null" >
        d_priv = #{record.dPriv,jdbcType=VARCHAR},
      </if>
      <if test="record.dCreateTime != null" >
        d_create_time = #{record.dCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dEditTime != null" >
        d_edit_time = #{record.dEditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dDept != null" >
        d_dept = #{record.dDept,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    set d_id = #{record.dId,jdbcType=INTEGER},
      d_name = #{record.dName,jdbcType=VARCHAR},
      d_desc = #{record.dDesc,jdbcType=VARCHAR},
      d_creator = #{record.dCreator,jdbcType=VARCHAR},
      d_editor = #{record.dEditor,jdbcType=VARCHAR},
      d_priv = #{record.dPriv,jdbcType=VARCHAR},
      d_create_time = #{record.dCreateTime,jdbcType=TIMESTAMP},
      d_edit_time = #{record.dEditTime,jdbcType=TIMESTAMP},
      d_dept = #{record.dDept,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    set d_id = #{record.dId,jdbcType=INTEGER},
      d_name = #{record.dName,jdbcType=VARCHAR},
      d_desc = #{record.dDesc,jdbcType=VARCHAR},
      d_creator = #{record.dCreator,jdbcType=VARCHAR},
      d_editor = #{record.dEditor,jdbcType=VARCHAR},
      d_priv = #{record.dPriv,jdbcType=VARCHAR},
      d_create_time = #{record.dCreateTime,jdbcType=TIMESTAMP},
      d_edit_time = #{record.dEditTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    <set >
      <if test="dName != null" >
        d_name = #{dName,jdbcType=VARCHAR},
      </if>
      <if test="dDesc != null" >
        d_desc = #{dDesc,jdbcType=VARCHAR},
      </if>
      <if test="dCreator != null" >
        d_creator = #{dCreator,jdbcType=VARCHAR},
      </if>
      <if test="dEditor != null" >
        d_editor = #{dEditor,jdbcType=VARCHAR},
      </if>
      <if test="dPriv != null" >
        d_priv = #{dPriv,jdbcType=VARCHAR},
      </if>
      <if test="dCreateTime != null" >
        d_create_time = #{dCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dEditTime != null" >
        d_edit_time = #{dEditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dDept != null" >
        d_dept = #{dDept,jdbcType=LONGVARCHAR},
      </if>

      <if test="dNmarking != null" >
        d_nmarking = #{dNmarking,jdbcType=VARCHAR},
      </if>
      <if test="dNmarkingdesc != null" >
        d_nmarkingdesc = #{dNmarkingdesc,jdbcType=VARCHAR},
      </if>
      <if test="dModuleName != null" >
        d_module_name = #{dModuleName,jdbcType=VARCHAR},
      </if>
    </set>
    where d_id = #{dId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    set d_name = #{dName,jdbcType=VARCHAR},
      d_desc = #{dDesc,jdbcType=VARCHAR},
      d_creator = #{dCreator,jdbcType=VARCHAR},
      d_editor = #{dEditor,jdbcType=VARCHAR},
      d_priv = #{dPriv,jdbcType=VARCHAR},
      d_create_time = #{dCreateTime,jdbcType=TIMESTAMP},
      d_edit_time = #{dEditTime,jdbcType=TIMESTAMP},
      d_dept = #{dDept,jdbcType=LONGVARCHAR}
    where d_id = #{dId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.dataSrc.DataSrc" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update data_src
    set d_name = #{dName,jdbcType=VARCHAR},
      d_desc = #{dDesc,jdbcType=VARCHAR},
      d_creator = #{dCreator,jdbcType=VARCHAR},
      d_editor = #{dEditor,jdbcType=VARCHAR},
      d_priv = #{dPriv,jdbcType=VARCHAR},
      d_create_time = #{dCreateTime,jdbcType=TIMESTAMP},
      d_edit_time = #{dEditTime,jdbcType=TIMESTAMP}
    where d_id = #{dId,jdbcType=INTEGER}
  </update>

  <select id="selectTerpServerByLike" parameterType="map" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/> FROM data_src ds
    <where>
      <if test="dName != null and dName != ''">
        and ds.d_name like CONCAT(CONCAT('%',#{dName}),'%')
      </if>
      <if test="dDesc != null and dDesc != ''">
        and ds.d_desc like CONCAT(CONCAT('%',#{dDesc}),'%')
      </if>
    </where>
  </select>

  <delete id="deleteTerpServerTwo" parameterType="java.lang.Integer">
    DELETE FROM data_src WHERE d_id = #{dID}
  </delete>

  <select id="selectTerpServerBydID" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT * FROM data_src WHERE d_id = #{dID}
  </select>

  <!--获取该表所有的列-->
  <select id="showColumns" resultType="String">
    select UPPER(column_name) from information_schema.columns where TABLE_SCHEMA= #{tableSchema} and table_name = #{tableName};
  </select>

  <!--查询某个表的行数和大小-->
  <select id="findTableSize" resultType="map" resultMap="ResultMapWithBLOBs">
    SELECT
	concat( round( sum( ( DATA_LENGTH + INDEX_LENGTH ) / 1024  ), 2 ), 'KB' ) AS datasize
    ,table_rows AS tbrows
    FROM
        information_schema.TABLES
    WHERE
        TABLE_SCHEMA = #{tableSchema}
	AND TABLE_NAME = #{tableName};
  </select>

  <select id="countTable" resultType="java.lang.Integer" parameterType="map">
    SELECT
	  COUNT(TABLE_NAME)
    FROM
        INFORMATION_SCHEMA.TABLES
    WHERE
      TABLE_SCHEMA = #{tableSchema}
	  AND TABLE_NAME = #{tableName};
  </select>


  <select id="findByDataSrcId" resultType="map" parameterType="map">
    SELECT
      column_name AS data1,
      data_type as data2,
      column_comment AS data3,
	  column_key as data4,
	  table_schema as data5
    FROM
        information_schema.COLUMNS
    WHERE
      table_name = #{tableName}
      AND table_schema = #{tableSchema}
  </select>

  <!--业务层做了控制  sql注入已修改-->
    <select id="selectTableAll" resultType="java.util.Map" parameterType="map">
        SELECT * FROM ${tableName}
        <where>
            <if test="condition!=null ">
                <foreach collection="condition" item="value" index="key" separator="and">
                    <if test="value!=null and value!='' ">
                        ${key} LIKE CONCAT('%' , #{value} , '%')
                    </if>
                </foreach>
            </if>
        </where>
    </select>

  <!--查询库中所有表结构-->
  <select id="firstDBSource" resultType="map" parameterType="string">
      SELECT
    *
    FROM
        information_schema.tables
    WHERE
      table_schema = #{tableSchema}
  </select>


  <select id="findDbName" resultType="java.lang.String">
    select
        `table_name`
    from information_schema.tables
    where table_schema= #{name}
    and table_type='BASE TABLE'
    and table_name = #{tabName}
  </select>


  <select id="findDbTabName" resultType="java.lang.String">
    SELECT
        `column_name`
    FROM
        information_schema.COLUMNS
    WHERE
        table_schema = #{sqlType}
        AND table_name = #{tabName}
        AND column_name = #{column}
  </select>

  <select id="getDataCount" resultType="integer">
    SELECT count(*) FROM ${tabName} WHERE ${column}= #{columnValue}
  </select>

  <select id="getConstraintKey" resultType="java.lang.String">
SELECT
  COLUMN_NAME
  FROM
  information_schema.key_column_usage
  WHERE
 table_schema = #{sqlType}
        AND table_name = #{tabName}
  AND constraint_name != 'PRIMARY'
  </select>

  <!--业务层做了控制  sql注入已修改-->
  <insert id="insertdata" parameterType="map">
    INSERT INTO ${tableName}
      <foreach collection="tabObj" item="value" index="key" open="(" close=")" separator="," >
          `${key}`
      </foreach>
      values
      <foreach collection="tabObj" item="value" index="key" open="(" close=")" separator=",">
          #{value}
      </foreach>
  </insert>

  <!--新增字段,已修改sql注入-->
  <insert id="insertField" parameterType="map">
     alter table ${dName} add
     <foreach collection="field" item="field" open="(" separator="," close=")">
       `${field.data1}` ${field.data2} comment "${field.data3}"
     </foreach>
  </insert>

  <!--已修改-->
  <update id="CreateTerpServerTable" parameterType="map" databaseId="mysql">
    CREATE TABLE IF NOT EXISTS ${dName}(
    `ds_key_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '系统自定义主键',
    <foreach collection="table" item="tab">
      ${tab.data1} ${tab.data2} NOT NULL COMMENT #{tab.data3},
    </foreach>
    PRIMARY KEY ( `ds_key_id` ) USING BTREE
    <foreach collection="table" item="tab">
      <if test="tab.isonly" >
        ,UNIQUE KEY ${tab.data1}( ${tab.data1} ) USING BTREE
      </if>
    </foreach>
    )ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT = #{dDesc};
  </update>

<!--  <update id="alterTableField" parameterType="map">
    ALTER TABLE ${tableName} ADD  ${fieldName} ${fieldType}(${fieldSize}) COMMENT #{fieldComment}
  </update>-->

<!--  <update id="onlyYesAndNo" parameterType="map">
    ALTER TABLE ${tableName} ADD unique (${fieldName})
  </update>-->

  <!--<update id="updatedDesc" parameterType="map">
    UPDATE ${tableName} SET d_desc = #{dDESC} WHERE d_id = #{dID}
  </update>-->

<!--  <update id="updataTerpServerField" parameterType="map">
    ALTER TABLE ${tableName} CHANGE ${oldField} ${newField} ${fieldType}(${fieldSize}) COMMENT "${fieldComment}"
  </update>-->

<!--已修改-->
  <update id="updateData" parameterType="map">
    UPDATE ${tableName}
    SET
    <foreach collection="tabObj" item="value" index="key" separator=",">
      ${key} = #{value}
    </foreach>
    WHERE ds_key_id= #{tabObj[ds_key_id]}
  </update>

  <!--修改字段 ，已修改-->
  <update id="updataField" parameterType="map">
    ALTER TABLE ${dName}
      <foreach collection="field" item="field" separator=",">
          CHANGE ${field.old} ${field.data1} ${field.data2} comment #{field.data3}
      </foreach>
  </update>

  <delete id="delIndex" parameterType="map">
    <foreach collection="delonly" item="delon">
      DROP INDEX `${delon}` ON ${dName};
    </foreach>
  </delete>
  <!--修改索引-->
  <update id="updateIndex" parameterType="map">
    <foreach collection="only" item="on">
      ALTER TABLE ${dName} ADD UNIQUE ${on}(${on});
    </foreach>
  </update>

  <!--操作表的数据，已修改-->
  <delete id="dropTableField" parameterType="map">
    DELETE FROM ${tableName} WHERE ds_key_id = #{keyId}
  </delete>

  <!--已修改-->
  <delete id="delectTableAllData" parameterType="String">
    DELETE FROM ${tableName}
  </delete>

  <!--删除表，这个层写死  不用改-->
    <delete id="deleteTable" parameterType="String">
      DROP TABLE ${TabName};
    </delete>

  <!--删除字段，已修改-->
  <delete id="delField" parameterType="map">
      ALTER TABLE `${tableName}`
      <if test="fieldName != null or fieldName != ''" >
        DROP `${fieldName}`
      </if>
  </delete>
</mapper>