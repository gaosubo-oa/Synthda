<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.email.EmailMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.email.EmailModel" >
    <result column="EMAIL_ID" property="emailId" javaType="INTEGER" />
    <result column="TO_ID" property="toId" javaType="String" />
    <result column="READ_FLAG" property="readFlag" javaType="String" />
    <result column="DELETE_FLAG" property="deleteFlag" javaType="String" />
    <result column="BOX_ID" property="boxId" javaType="INTEGER" />
    <result column="BODY_ID" property="bodyId" javaType="INTEGER" />
    <result column="RECEIPT" property="receipt" javaType="String" />
    <result column="IS_F" property="isF" javaType="String" />
    <result column="IS_R" property="isR" javaType="String" />
    <result column="SIGN" property="sign" javaType="String" />
    <result column="withdraw_flag" property="withdrawFlag" javaType="String" />
  </resultMap>
  <resultMap id="BaseResultMapWithName" type="com.xoa.model.email.EmailModel" extends="BaseResultMap" >
    <result column="USER_NAME" property="userName" javaType="String" />
    <result column="DEPT_NAME" property="deptName" javaType="String" />

      <result column="UID" property="UID" javaType="String" />
  </resultMap>
  	<!-- 发送邮件 并保存数据库 -->
  <insert id="save" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId" >
    <selectKey order="AFTER" keyProperty="emailId" resultType="int">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into email (TO_ID, READ_FLAG, 
      DELETE_FLAG, BOX_ID, BODY_ID, 
      RECEIPT, IS_F, IS_R, SIGN
      )
    values ( #{toId}, #{readFlag}, 
      #{deleteFlag}, #{boxId}, #{bodyId}, 
      #{receipt}, #{isF}, #{isR}, #{sign}
      )
  </insert>

    <insert id="save" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId"  databaseId="dm">
        <selectKey order="AFTER" keyProperty="emailId" resultType="int">
            SELECT IDENT_CURRENT('EMAIL');
        </selectKey>
        insert into email (TO_ID, READ_FLAG,
        DELETE_FLAG, BOX_ID, BODY_ID,
        RECEIPT, IS_F, IS_R, SIGN
        )
        values ( #{toId}, #{readFlag},
        #{deleteFlag}, #{boxId}, #{bodyId},
        #{receipt}, #{isF}, #{isR}, #{sign}
        )
    </insert>

    <insert id="save" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId"  databaseId="oracle">
        <selectKey keyProperty="emailId"  order="BEFORE" resultType="int">
            select EMAIL_EMAIL_ID_SEQ.nextval as emailId from  dual
        </selectKey>
        insert into email (EMAIL_ID,TO_ID, READ_FLAG,
        DELETE_FLAG, BOX_ID, BODY_ID,
        RECEIPT, IS_F, IS_R, SIGN
        )
        values (#{emailId}, #{toId}, #{readFlag},
        #{deleteFlag}, #{boxId}, #{bodyId},
        #{receipt}, #{isF}, #{isR}, #{sign}
        )
    </insert>

    <insert id="save" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId"  databaseId="kingbase">
        INSERT INTO email
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="emailId != null">
                EMAIL_ID,
            </if>
            <if test="toId != null">
                TO_ID,
            </if>
            <if test="readFlag != null">
                READ_FLAG,
            </if>
            <if test="deleteFlag != null">
                DELETE_FLAG,
            </if>
            <if test="boxId != null">
                BOX_ID,
            </if>
            <if test="bodyId != null">
                BODY_ID,
            </if>
            <if test="receipt != null">
                RECEIPT,
            </if>
            <if test="isF != null">
                IS_F,
            </if>
            <if test="isR != null">
                IS_R,
            </if>
            <if test="sign != null">
                SIGN,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="emailId != null">
                #{emailId},
            </if>
            <if test="toId != null">
                #{toId},
            </if>
            <if test="readFlag != null">
                #{readFlag},
            </if>
            <if test="deleteFlag != null">
                #{deleteFlag},
            </if>
            <if test="boxId != null">
                #{boxId},
            </if>
            <if test="bodyId != null">
                #{bodyId},
            </if>
            <if test="receipt != null">
                #{receipt},
            </if>
            <if test="isF != null">
                #{isF},
            </if>
            <if test="isR != null">
                #{isR},
            </if>
            <if test="sign != null">
                #{sign},
            </if>
        </trim>
        RETURNING EMAIL_ID
    </insert>
  	<!-- 未读转为已读 -->
	<update id="updateIsRead" parameterType="com.xoa.model.email.EmailModel">
	update email set READ_FLAG=#{readFlag} where EMAIL_ID=#{emailId}
	</update>

  <!-- 建立外部邮件关联关系 -->
  <update id="updateEmailBox" parameterType="com.xoa.model.email.EmailModel">
    UPDATE email e
    SET e.BOX_ID = #{boxId}
    WHERE
    e.EMAIL_ID = #{emailId}
    AND
      e.TO_ID = #{toId}
  </update>


    <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map">
        SELECT e.*,u.USER_NAME,d.DEPT_NAME FROM email e INNER JOIN
        `user`  u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
          #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}  GROUP BY e.TO_ID
    </select>

    <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="oracle">
        SELECT
        E .*, U .USER_NAME,
        D .DEPT_NAME
        FROM
        email E
        INNER JOIN "USER" U ON U .USER_ID = E .TO_ID
        INNER JOIN DEPARTMENT D ON D .DEPT_ID = U .DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}
    </select>

    <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="dm">
        SELECT e.*,u.USER_NAME,d.DEPT_NAME FROM email e INNER JOIN
        "USER" u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}
    </select>

    <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="kingbase">
        SELECT e.*,u.USER_NAME,d.DEPT_NAME FROM email e INNER JOIN
        "USER" u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}
    </select>


    <select id="selectUserReadFlag1" resultMap="BaseResultMapWithName" parameterType="Map">
        SELECT e.*,u.UID,u.USER_NAME,d.DEPT_NAME FROM email e INNER JOIN
        `user`  u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}  GROUP BY e.TO_ID
    </select>

    <select id="selectUserReadFlag1" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="dm">
        SELECT e.*,u.UID,u.USER_NAME,d.DEPT_NAME
        FROM email e
        INNER JOIN "user"  u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}
    </select>

    <select id="selectUserReadFlag1" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="kingbase">
        SELECT e.*,u.UID,u.USER_NAME,d.DEPT_NAME
        FROM email e
        INNER JOIN "user"  u ON u.USER_ID =e.TO_ID
        INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
        WHERE e.TO_ID in
        <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND   e.BODY_ID=#{bodyId}
    </select>

  <select id="queryByEmailOne" resultMap="BaseResultMap">
     SELECT * FROM email WHERE email.EMAIL_ID=#{emailId}
  </select>

    <select id="selectByBodyId" parameterType="Map" resultMap="BaseResultMapWithName" >
        SELECT e.*,u.user_Name  from email e,user u where u.user_id = e.to_id AND e.body_id = #{bodyId}
    </select>

    <select id="selectByBodyId" parameterType="Map" resultMap="BaseResultMapWithName" databaseId="kingbase">
        SELECT e.*,u.user_Name  from email e,"user" u where u.user_id = e.to_id AND e.body_id = #{bodyId}
    </select>

    <update id="updateDiu" parameterType="map">
        UPDATE `email` SET  `DELETE_FLAG` = '2' WHERE `TO_ID` = #{toId} and `EMAIL_ID` = #{emailId} and ( `DELETE_FLAG` = '4' or `DELETE_FLAG` = '3');
    </update>

    <update id="updateDiu" parameterType="map" databaseId="kingbase">
        UPDATE email
        SET DELETE_FLAG = '2'
        WHERE TO_ID = #{toId}
          AND EMAIL_ID = #{emailId}
          AND (DELETE_FLAG = '4' OR DELETE_FLAG = '3');
    </update>

    <update id="updateEmailWithdraw"  parameterType="Map">
        update email set withdraw_flag=1  where BODY_ID= #{bodyId}
        <if test=" userIds!=null ">
            AND to_id in
            <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
                #{userId}
            </foreach>
        </if>
    </update>

    <select id="selectEmailInboxCount" resultType="Integer" >
      SELECT
        count( * ),
        BOX_ID
    FROM
        `email` FORCE INDEX ( USER_BOX )
    WHERE
        BOX_ID IN ( 0 )
        AND DELETE_FLAG IN ( '', '0', '2' )
        AND TO_ID = 'admin'
    GROUP BY
        `BOX_ID`;
    </select>

    <select id="selectEmail" resultType="Integer"  >
        select  count(*)  from email

    </select>

    <insert id="SendEmails" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId" >
        <selectKey order="AFTER" keyProperty="emailId" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into email (TO_ID, READ_FLAG,
        DELETE_FLAG, BOX_ID, BODY_ID,
        RECEIPT, IS_F, IS_R, SIGN
        )
        values ( #{toId}, #{readFlag},
        #{deleteFlag}, #{boxId}, #{bodyId},
        #{receipt}, #{isF}, #{isR}, #{sign}
        )
    </insert>

    <insert id="SendEmails" parameterType="com.xoa.model.email.EmailModel" useGeneratedKeys="true" keyProperty="emailId" databaseId="kingbase">
        insert into email (TO_ID, READ_FLAG,
        DELETE_FLAG, BOX_ID, BODY_ID,
        RECEIPT, IS_F, IS_R, SIGN
        )
        values ( #{toId}, #{readFlag},
        #{deleteFlag}, #{boxId}, #{bodyId},
        #{receipt}, #{isF}, #{isR}, #{sign}
        )
        RETURNING EMAIL_ID
    </insert>

</mapper>