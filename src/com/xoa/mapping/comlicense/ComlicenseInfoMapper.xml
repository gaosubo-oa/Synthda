<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.comlicense.ComlicenseInfoMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.comlicense.ComlicenseInfo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="LICENSE_ID" property="licenseId" jdbcType="INTEGER" />
    <result column="LICENSE_NO" property="licenseNo" jdbcType="VARCHAR" />
    <result column="LICENSE_NAME" property="licenseName" jdbcType="VARCHAR" />
    <result column="LICENSE_TYPE" property="licenseType" jdbcType="INTEGER" />
    <result column="LICENSE_STATUS" property="licenseStatus" jdbcType="VARCHAR" />
    <result column="VALIDITY_BEGIN_DATE" property="validityBeginDate" jdbcType="DATE" />
    <result column="VALIDITY_END_DATE" property="validityEndDate" jdbcType="DATE" />
    <result column="VALIDITY_YEAR" property="validityYear" jdbcType="VARCHAR" />
    <result column="INSSUE_DATE" property="inssueDate" jdbcType="DATE" />
    <result column="ANNUAL_INSPECTION_DATE" property="annualInspectionDate" jdbcType="DATE" />
    <result column="ISSUE_UNIT" property="issueUnit" jdbcType="VARCHAR" />
    <result column="VERSION_ID" property="versionId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="REMARK" property="remark" jdbcType="LONGVARCHAR" />
    <result column="ATTACHMENT_ID" property="attachmentId" jdbcType="LONGVARCHAR" />
    <result column="ATTACHMENT_NAME" property="attachmentName" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    LICENSE_ID, LICENSE_NO, LICENSE_NAME, LICENSE_TYPE, LICENSE_STATUS, VALIDITY_BEGIN_DATE, 
    VALIDITY_END_DATE, VALIDITY_YEAR, INSSUE_DATE, ANNUAL_INSPECTION_DATE, ISSUE_UNIT, 
    VERSION_ID
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    REMARK, ATTACHMENT_ID, ATTACHMENT_NAME
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.xoa.model.comlicense.ComlicenseInfoExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comlicense_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xoa.model.comlicense.ComlicenseInfoExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comlicense_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comlicense_info
    where LICENSE_ID = #{licenseId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from comlicense_info
    where LICENSE_ID = #{licenseId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xoa.model.comlicense.ComlicenseInfoExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from comlicense_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into comlicense_info (LICENSE_ID, LICENSE_NO, LICENSE_NAME, 
      LICENSE_TYPE, LICENSE_STATUS, VALIDITY_BEGIN_DATE, 
      VALIDITY_END_DATE, VALIDITY_YEAR, INSSUE_DATE, 
      ANNUAL_INSPECTION_DATE, ISSUE_UNIT, VERSION_ID, 
      REMARK, ATTACHMENT_ID, ATTACHMENT_NAME
      )
    values (#{licenseId,jdbcType=INTEGER}, #{licenseNo,jdbcType=VARCHAR}, #{licenseName,jdbcType=VARCHAR}, 
      #{licenseType,jdbcType=INTEGER}, #{licenseStatus,jdbcType=VARCHAR}, #{validityBeginDate,jdbcType=DATE}, 
      #{validityEndDate,jdbcType=DATE}, #{validityYear,jdbcType=VARCHAR}, #{inssueDate,jdbcType=DATE}, 
      #{annualInspectionDate,jdbcType=DATE}, #{issueUnit,jdbcType=VARCHAR}, #{versionId,jdbcType=INTEGER}, 
      #{remark,jdbcType=LONGVARCHAR}, #{attachmentId,jdbcType=LONGVARCHAR}, #{attachmentName,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective"  parameterType="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="licenseId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into comlicense_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="licenseId != null" >
        LICENSE_ID,
      </if>
      <if test="licenseNo != null" >
        LICENSE_NO,
      </if>
      <if test="licenseName != null" >
        LICENSE_NAME,
      </if>
      <if test="licenseType != null" >
        LICENSE_TYPE,
      </if>
      <if test="licenseStatus != null" >
        LICENSE_STATUS,
      </if>
      <if test="validityBeginDate != null" >
        VALIDITY_BEGIN_DATE,
      </if>
      <if test="validityEndDate != null" >
        VALIDITY_END_DATE,
      </if>
      <if test="validityYear != null" >
        VALIDITY_YEAR,
      </if>
      <if test="inssueDate != null" >
        INSSUE_DATE,
      </if>
      <if test="annualInspectionDate != null" >
        ANNUAL_INSPECTION_DATE,
      </if>
      <if test="issueUnit != null" >
        ISSUE_UNIT,
      </if>
      <if test="versionId != null" >
        VERSION_ID,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID,
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="licenseId != null" >
        #{licenseId,jdbcType=INTEGER},
      </if>
      <if test="licenseNo != null" >
        #{licenseNo,jdbcType=VARCHAR},
      </if>
      <if test="licenseName != null" >
        #{licenseName,jdbcType=VARCHAR},
      </if>
      <if test="licenseType != null" >
        #{licenseType,jdbcType=INTEGER},
      </if>
      <if test="licenseStatus != null" >
        #{licenseStatus,jdbcType=VARCHAR},
      </if>
      <if test="validityBeginDate != null" >
        #{validityBeginDate,jdbcType=DATE},
      </if>
      <if test="validityEndDate != null" >
        #{validityEndDate,jdbcType=DATE},
      </if>
      <if test="validityYear != null" >
        #{validityYear,jdbcType=VARCHAR},
      </if>
      <if test="inssueDate != null" >
        #{inssueDate,jdbcType=DATE},
      </if>
      <if test="annualInspectionDate != null" >
        #{annualInspectionDate,jdbcType=DATE},
      </if>
      <if test="issueUnit != null" >
        #{issueUnit,jdbcType=VARCHAR},
      </if>
      <if test="versionId != null" >
        #{versionId,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentId != null" >
        #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentName != null" >
        #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <insert id="insertSelective"  parameterType="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" databaseId="kingbase" useGeneratedKeys="true" keyProperty="licenseId">
    insert into comlicense_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="licenseId != null" >
        LICENSE_ID,
      </if>
      <if test="licenseNo != null" >
        LICENSE_NO,
      </if>
      <if test="licenseName != null" >
        LICENSE_NAME,
      </if>
      <if test="licenseType != null" >
        LICENSE_TYPE,
      </if>
      <if test="licenseStatus != null" >
        LICENSE_STATUS,
      </if>
      <if test="validityBeginDate != null" >
        VALIDITY_BEGIN_DATE,
      </if>
      <if test="validityEndDate != null" >
        VALIDITY_END_DATE,
      </if>
      <if test="validityYear != null" >
        VALIDITY_YEAR,
      </if>
      <if test="inssueDate != null" >
        INSSUE_DATE,
      </if>
      <if test="annualInspectionDate != null" >
        ANNUAL_INSPECTION_DATE,
      </if>
      <if test="issueUnit != null" >
        ISSUE_UNIT,
      </if>
      <if test="versionId != null" >
        VERSION_ID,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID,
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="licenseId != null" >
        #{licenseId,jdbcType=INTEGER},
      </if>
      <if test="licenseNo != null" >
        #{licenseNo,jdbcType=VARCHAR},
      </if>
      <if test="licenseName != null" >
        #{licenseName,jdbcType=VARCHAR},
      </if>
      <if test="licenseType != null" >
        #{licenseType,jdbcType=INTEGER},
      </if>
      <if test="licenseStatus != null" >
        #{licenseStatus,jdbcType=VARCHAR},
      </if>
      <if test="validityBeginDate != null" >
        #{validityBeginDate,jdbcType=DATE},
      </if>
      <if test="validityEndDate != null" >
        #{validityEndDate,jdbcType=DATE},
      </if>
      <if test="validityYear != null" >
        #{validityYear,jdbcType=VARCHAR},
      </if>
      <if test="inssueDate != null" >
        #{inssueDate,jdbcType=DATE},
      </if>
      <if test="annualInspectionDate != null" >
        #{annualInspectionDate,jdbcType=DATE},
      </if>
      <if test="issueUnit != null" >
        #{issueUnit,jdbcType=VARCHAR},
      </if>
      <if test="versionId != null" >
        #{versionId,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentId != null" >
        #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentName != null" >
        #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.xoa.model.comlicense.ComlicenseInfoExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from comlicense_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    <set >
      <if test="record.licenseId != null" >
        LICENSE_ID = #{record.licenseId,jdbcType=INTEGER},
      </if>
      <if test="record.licenseNo != null" >
        LICENSE_NO = #{record.licenseNo,jdbcType=VARCHAR},
      </if>
      <if test="record.licenseName != null" >
        LICENSE_NAME = #{record.licenseName,jdbcType=VARCHAR},
      </if>
      <if test="record.licenseType != null" >
        LICENSE_TYPE = #{record.licenseType,jdbcType=INTEGER},
      </if>
      <if test="record.licenseStatus != null" >
        LICENSE_STATUS = #{record.licenseStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.validityBeginDate != null" >
        VALIDITY_BEGIN_DATE = #{record.validityBeginDate,jdbcType=DATE},
      </if>
      <if test="record.validityEndDate != null" >
        VALIDITY_END_DATE = #{record.validityEndDate,jdbcType=DATE},
      </if>
      <if test="record.validityYear != null" >
        VALIDITY_YEAR = #{record.validityYear,jdbcType=VARCHAR},
      </if>
      <if test="record.inssueDate != null" >
        INSSUE_DATE = #{record.inssueDate,jdbcType=DATE},
      </if>
      <if test="record.annualInspectionDate != null" >
        ANNUAL_INSPECTION_DATE = #{record.annualInspectionDate,jdbcType=DATE},
      </if>
      <if test="record.issueUnit != null" >
        ISSUE_UNIT = #{record.issueUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.versionId != null" >
        VERSION_ID = #{record.versionId,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null" >
        REMARK = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.attachmentId != null" >
        ATTACHMENT_ID = #{record.attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.attachmentName != null" >
        ATTACHMENT_NAME = #{record.attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    set LICENSE_ID = #{record.licenseId,jdbcType=INTEGER},
      LICENSE_NO = #{record.licenseNo,jdbcType=VARCHAR},
      LICENSE_NAME = #{record.licenseName,jdbcType=VARCHAR},
      LICENSE_TYPE = #{record.licenseType,jdbcType=INTEGER},
      LICENSE_STATUS = #{record.licenseStatus,jdbcType=VARCHAR},
      VALIDITY_BEGIN_DATE = #{record.validityBeginDate,jdbcType=DATE},
      VALIDITY_END_DATE = #{record.validityEndDate,jdbcType=DATE},
      VALIDITY_YEAR = #{record.validityYear,jdbcType=VARCHAR},
      INSSUE_DATE = #{record.inssueDate,jdbcType=DATE},
      ANNUAL_INSPECTION_DATE = #{record.annualInspectionDate,jdbcType=DATE},
      ISSUE_UNIT = #{record.issueUnit,jdbcType=VARCHAR},
      VERSION_ID = #{record.versionId,jdbcType=INTEGER},
      REMARK = #{record.remark,jdbcType=LONGVARCHAR},
      ATTACHMENT_ID = #{record.attachmentId,jdbcType=LONGVARCHAR},
      ATTACHMENT_NAME = #{record.attachmentName,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    set LICENSE_ID = #{record.licenseId,jdbcType=INTEGER},
      LICENSE_NO = #{record.licenseNo,jdbcType=VARCHAR},
      LICENSE_NAME = #{record.licenseName,jdbcType=VARCHAR},
      LICENSE_TYPE = #{record.licenseType,jdbcType=INTEGER},
      LICENSE_STATUS = #{record.licenseStatus,jdbcType=VARCHAR},
      VALIDITY_BEGIN_DATE = #{record.validityBeginDate,jdbcType=DATE},
      VALIDITY_END_DATE = #{record.validityEndDate,jdbcType=DATE},
      VALIDITY_YEAR = #{record.validityYear,jdbcType=VARCHAR},
      INSSUE_DATE = #{record.inssueDate,jdbcType=DATE},
      ANNUAL_INSPECTION_DATE = #{record.annualInspectionDate,jdbcType=DATE},
      ISSUE_UNIT = #{record.issueUnit,jdbcType=VARCHAR},
      VERSION_ID = #{record.versionId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    <set >
      <if test="licenseNo != null" >
        LICENSE_NO = #{licenseNo,jdbcType=VARCHAR},
      </if>
      <if test="licenseName != null" >
        LICENSE_NAME = #{licenseName,jdbcType=VARCHAR},
      </if>
      <if test="licenseType != null" >
        LICENSE_TYPE = #{licenseType,jdbcType=INTEGER},
      </if>
      <if test="licenseStatus != null" >
        LICENSE_STATUS = #{licenseStatus,jdbcType=VARCHAR},
      </if>
      <if test="validityBeginDate != null" >
        VALIDITY_BEGIN_DATE = #{validityBeginDate,jdbcType=DATE},
      </if>
      <if test="validityEndDate != null" >
        VALIDITY_END_DATE = #{validityEndDate,jdbcType=DATE},
      </if>
      <if test="validityYear != null" >
        VALIDITY_YEAR = #{validityYear,jdbcType=VARCHAR},
      </if>
      <if test="inssueDate != null" >
        INSSUE_DATE = #{inssueDate,jdbcType=DATE},
      </if>
      <if test="annualInspectionDate != null" >
        ANNUAL_INSPECTION_DATE = #{annualInspectionDate,jdbcType=DATE},
      </if>
      <if test="issueUnit != null" >
        ISSUE_UNIT = #{issueUnit,jdbcType=VARCHAR},
      </if>
      <if test="versionId != null" >
        VERSION_ID =VERSION_ID+1 ,
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID = #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME = #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where LICENSE_ID = #{licenseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.comlicense.ComlicenseInfoWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    set LICENSE_NO = #{licenseNo,jdbcType=VARCHAR},
      LICENSE_NAME = #{licenseName,jdbcType=VARCHAR},
      LICENSE_TYPE = #{licenseType,jdbcType=INTEGER},
      LICENSE_STATUS = #{licenseStatus,jdbcType=VARCHAR},
      VALIDITY_BEGIN_DATE = #{validityBeginDate,jdbcType=DATE},
      VALIDITY_END_DATE = #{validityEndDate,jdbcType=DATE},
      VALIDITY_YEAR = #{validityYear,jdbcType=VARCHAR},
      INSSUE_DATE = #{inssueDate,jdbcType=DATE},
      ANNUAL_INSPECTION_DATE = #{annualInspectionDate,jdbcType=DATE},
      ISSUE_UNIT = #{issueUnit,jdbcType=VARCHAR},
      VERSION_ID = #{versionId,jdbcType=INTEGER},
      REMARK = #{remark,jdbcType=LONGVARCHAR},
      ATTACHMENT_ID = #{attachmentId,jdbcType=LONGVARCHAR},
      ATTACHMENT_NAME = #{attachmentName,jdbcType=LONGVARCHAR}
    where LICENSE_ID = #{licenseId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.comlicense.ComlicenseInfo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comlicense_info
    set LICENSE_NO = #{licenseNo,jdbcType=VARCHAR},
      LICENSE_NAME = #{licenseName,jdbcType=VARCHAR},
      LICENSE_TYPE = #{licenseType,jdbcType=INTEGER},
      LICENSE_STATUS = #{licenseStatus,jdbcType=VARCHAR},
      VALIDITY_BEGIN_DATE = #{validityBeginDate,jdbcType=DATE},
      VALIDITY_END_DATE = #{validityEndDate,jdbcType=DATE},
      VALIDITY_YEAR = #{validityYear,jdbcType=VARCHAR},
      INSSUE_DATE = #{inssueDate,jdbcType=DATE},
      ANNUAL_INSPECTION_DATE = #{annualInspectionDate,jdbcType=DATE},
      ISSUE_UNIT = #{issueUnit,jdbcType=VARCHAR},
      VERSION_ID = #{versionId,jdbcType=INTEGER}
    where LICENSE_ID = #{licenseId,jdbcType=INTEGER}
  </update>
  <select id="selectAll" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    distinct
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" /> from  comlicense_info
    <where>
      <if test="licenseType!=null">
        and LICENSE_TYPE=#{licenseType}
      </if>
    </where>
    order by INSSUE_DATE desc
  </select>

    <select id="getLicenseNameById" resultType="string">
        select LICENSE_NAME from comlicense_info where LICENSE_ID=#{licenseId}
    </select>

  <select id="getDataByCondition" resultMap="ResultMapWithBLOBs">
    select * from comlicense_info
    <where>
      <if test="licenseName!=null and licenseName!=''">
        and LICENSE_NAME like concat('%',#{licenseName},'%')
      </if>
      <if test="licenseStatus!=null and licenseStatus!=''">
        and LICENSE_STATUS=#{licenseStatus}
      </if>
      <if test="licenseType!=null and licenseType!=''">
        and LICENSE_TYPE=#{licenseType}
      </if>
    <if test="issueUnit!=null and issueUnit!=''">
      and ISSUE_UNIT like concat('%',#{issueUnit},'%')
    </if>
    <if test="effectiveDate!=null and effectiveDate==1">
      and DATEDIFF(CURDATE(),VALIDITY_END_DATE) > 0
    </if>
      <if test="effectiveDate!=null and effectiveDate==2">
        and (DATEDIFF(VALIDITY_END_DATE,VALIDITY_BEGIN_DATE) &lt;=  30 and DATEDIFF(CURDATE(),VALIDITY_END_DATE) &lt;= 0 )
      </if>
      <if test="effectiveDate!=null and effectiveDate==3">
        and (DATEDIFF(VALIDITY_END_DATE,VALIDITY_BEGIN_DATE) &lt;=  90 and DATEDIFF(CURDATE(),VALIDITY_END_DATE) &lt;= 0 )
      </if>
      <if test="effectiveDate!=null and effectiveDate==4">
        and (DATEDIFF(VALIDITY_END_DATE,VALIDITY_BEGIN_DATE) &lt;= 180 and DATEDIFF(CURDATE(),VALIDITY_END_DATE) &lt;= 0 )
      </if>
    </where>
    order by INSSUE_DATE desc
  </select>
</mapper>