<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.attendance.UserDutyMapper">
    <resultMap id="BaseResultMap" type="com.xoa.model.attendance.UserDuty">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="UDID" property="udid" jdbcType="INTEGER"/>
        <result column="UID" property="uid" jdbcType="INTEGER"/>
        <result column="DUTY_TYPE" property="dutyType" jdbcType="INTEGER"/>
        <result column="ADD_TYPE" property="addType" jdbcType="CHAR"/>
        <result column="DUTY_DATE" property="dutyDate" jdbcType="DATE"/>
        <result column="USER_ID" property="userId" javaType="String"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        UDID, UID, DUTY_TYPE,ADD_TYPE, DUTY_DATE
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List"/>
        from user_duty
        where UDID = #{udid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from user_duty
        where UDID = #{udid,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.xoa.model.attendance.UserDuty">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into user_duty (UID, DUTY_TYPE,ADD_TYPE,
        DUTY_DATE)
        values (#{uid,jdbcType=INTEGER}, #{dutyType,jdbcType=INTEGER}, #{addType,jdbcType=CHAR},
        #{dutyDate,jdbcType=DATE})
    </insert>
    <insert id="insertSelective" parameterType="com.xoa.model.attendance.UserDuty">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into user_duty
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="udid != null">
                UDID,
            </if>
            <if test="uid != null">
                UID,
            </if>
            <if test="dutyType != null">
                DUTY_TYPE,
            </if>
            <if test="addType != null">
                ADD_TYPE,
            </if>
            <if test="dutyDate != null">
                DUTY_DATE,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="udid != null">
                #{udid,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="dutyType != null">
                #{dutyType,jdbcType=INTEGER},
            </if>
            <if test="addType != null">
                #{addType,jdbcType=CHAR},
            </if>
            <if test="dutyDate != null">
                #{dutyDate,jdbcType=DATE},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.attendance.UserDuty">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update user_duty
        <set>
            <if test="uid != null">
                UID = #{uid,jdbcType=INTEGER},
            </if>
            <if test="dutyType != null">
                DUTY_TYPE = #{dutyType,jdbcType=INTEGER},
            </if>
            <if test="addType != null">
                ADD_TYPE = #{addType,jdbcType=CHAR},
            </if>
            <if test="dutyDate != null">
                DUTY_DATE = #{dutyDate,jdbcType=DATE},
            </if>
        </set>
        where UDID = #{udid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.xoa.model.attendance.UserDuty">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update user_duty
        set UID = #{uid,jdbcType=INTEGER},
        DUTY_TYPE = #{dutyType,jdbcType=INTEGER},
        ADD_TYPE = #{addType,jdbcType=CHAR},
        DUTY_DATE = #{dutyDate,jdbcType=DATE}
        where UDID = #{udid,jdbcType=INTEGER}
    </update>

    <!--根据用户uid和时间获得userDutyList-->
    <select id="userDuty" resultMap="BaseResultMap">
    SELECT * FROM user_duty WHERE uid = #{uid} AND duty_date = #{date}
  </select>

    <!--停用删除当前排班所有的uid-->
    <delete id="deleteUserDutyByUidList" >
        DELETE FROM user_duty WHERE uid IN
        <foreach collection="uidList" close=")" open="(" item="uid" separator="," index="index">
            #{uid}
        </foreach>
        and DUTY_DATE > NOW()
        and ADD_TYPE = #{addType}
    </delete>

    <!--启用或保存插入排班人员-->
    <insert id="insertUserDutyByValues" parameterType="com.xoa.model.attendance.UserDuty">
        INSERT INTO user_duty(uid,duty_type,add_type,duty_date) VALUES
        <foreach collection="listDuty" index="index" separator="," item="duty">
            (#{duty.uid},#{duty.dutyType},#{duty.addType},#{duty.dutyDate})
        </foreach>
        ON DUPLICATE KEY UPDATE
        <if test="addType != 3 ">
            duty_type = VALUES(duty_type),
        </if>
        add_type = if(locate(#{addType},add_type) = 0, #{addType},add_type)
    </insert>

    <insert id="insertUserDutyByValues" parameterType="com.xoa.model.attendance.UserDuty" databaseId="kingbase">
        INSERT INTO user_duty(uid,duty_type,add_type,duty_date) VALUES
        <foreach collection="listDuty" index="duty" separator="," item="duty">
            (#{duty.uid},#{duty.dutyType},#{duty.addType},#{duty.dutyDate})
        </foreach>
        ON CONFLICT (UID,DUTY_DATE) DO UPDATE SET
        <if test="addType != 3 ">
            duty_type = user_duty.duty_type,
        </if>
        user_duty.add_type =
        CASE
        WHEN POSITION(#{addType} IN user_duty.add_type) = 0 THEN CONCAT(user_duty.add_type, '-', #{addType})
        ELSE user_duty.add_type
        END
    </insert>

    <!-- 根据uid和时间删除数据-->
    <delete id="deleteUserDutyByUidAndDate">
        delete from user_duty where uid=#{uid} and DUTY_DATE in
        <foreach collection="dateList" close=")" open="(" index="index" separator="," item="date">
            #{date}
        </foreach>
        and ADD_TYPE =  #{addType,jdbcType=CHAR}
    </delete>

    <!--获取符合条件的人员和日期-->
    <select id="getUserDutyListByMap" resultType="Integer" parameterType="map">
        select distinct ud.uid from user_duty ud
        join user u on u.UID=ud.UID and u.DEPT_ID != 0
        <if test=" map.noDutyUser!=null and map.noDutyUser!='' ">
            and !find_in_set(u.USER_ID,#{map.noDutyUser})
        </if>
        join department d on u.DEPT_ID = d.DEPT_ID
        <where>
            <if test="map.dutyType!=null">
                ud.DUTY_TYPE=#{map.dutyType}
            </if>
            <if test="map.addType!=null">
                ud.ADD_TYPE=#{map.addType}
            </if>
            <if test="map.beginDate!='' and map.endDate!='' ">
                and ud.DUTY_DATE BETWEEN #{map.beginDate} and #{map.endDate}
            </if>
            <if test="map.deptId!=null">
                and u.DEPT_ID in (${map.deptId})
            </if>
            <if test="map.uid!=null">
                and u.uid=#{map.uid}
            </if>
            and u.uid is not null
            order by d.DEPT_NO,u.USER_PRIV_NO,u.USER_PRIV,u.USER_NO,u.USER_NAME
            <if test="map.startNum!=null and map.endNum!=null">
                limit #{map.startNum},#{map.endNum}
            </if>
        </where>

    </select>


    <!--根据uid查询-->
    <select id="getUserDutyListByUidList" resultMap="BaseResultMap" parameterType="Integer">
        select * from user_duty where
        <if test="dutyMap.beginDate!='' and dutyMap.endDate!='' ">
            duty_date between #{dutyMap.beginDate} and #{dutyMap.endDate} and
        </if>
        uid in
        <foreach collection="uidList" close=")" open="(" index="index" separator="," item="uid">
            #{uid}
        </foreach>
        <if test="dutyMap.dutyType!=null">
            and DUTY_TYPE=#{dutyMap.dutyType}
        </if>
        <if test="dutyMap.addType!=null">
            and ADD_TYPE=#{dutyMap.addType}
        </if>
    </select>

    <!--获取总条数-->
    <select id="getTotalByMap" resultType="Integer">
        select count(distinct ud.uid) from user_duty ud join user u on u.UID=ud.UID and u.DEPT_ID != 0
        <where>
            <if test="mapCount.dutyType!=null">
                ud.DUTY_TYPE=#{mapCount.dutyType}
            </if>
            <if test="mapCount.addType!=null">
                ud.ADD_TYPE=#{mapCount.addType}
            </if>
            and ud.DUTY_DATE BETWEEN #{mapCount.beginDate} and #{mapCount.endDate}
            <if test="mapCount.deptId!=null">
                and ud.uid in (select uid from user where u.DEPT_ID in (${mapCount.deptId}))
            </if>
            <if test="mapCount.uid!=null">
                and ud.uid=#{mapCount.uid}
            </if>
            and ud.uid is not null
        </where>
    </select>

    <!-- 根据uid和时间区间查询userDuty  List-->

    <select id="getUserDutyListByUidAndDates" resultMap="BaseResultMap">
    SELECT * FROM user_duty WHERE uid = #{uid} AND duty_date between #{beginDate} and #{endDate}
  </select>

    <!-- 删除时间在区间的记录-->
    <delete id="deleteDutyByMap" parameterType="map">
        DELETE
        FROM
        user_duty
        WHERE
        uid = #{uid}
        <if test="date!=null">
            AND DUTY_DATE &gt; #{date}
        </if>
        <if test="dateEnd!=null">
            and DUTY_DATE&lt;=#{dateEnd}
        </if>
        and ADD_TYPE = #{addType}
    </delete>

    <!-- 可以根据多人和时间区间获取排班信息-->
    <select id="getUserDutyListByUserIdsAndDates" resultMap="BaseResultMap" parameterType="map">
        SELECT
        ud.*,
        u.user_id
        FROM
        user_duty ud
        left join user u on u.uid=ud.uid and u.DEPT_ID != 0
        WHERE
        ud.uid IN
        <foreach collection="queryUserDutyMap.pinSet" item="pinset" separator="," open="(" close=")">
            (SELECT uid FROM USER WHERE USER_ID = #{pinset})
        </foreach>
        and DUTY_DATE BETWEEN #{queryUserDutyMap.beginDate} and #{queryUserDutyMap.endDate}
    </select>
    <!-- 停用删除当前排班所有的uid-->
    <delete id="deleteUserDutyByUidListAndDate" parameterType="map">
        DELETE
        FROM
        user_duty
        <where>
            <if test="deleteMap.listUid != null">
                uid in
                <foreach collection="deleteMap.listUid" close=")" open="(" item="uid" separator="," index="index">
                    #{uid}
                </foreach>
            </if>
            <if test="deleteMap.dateStart != null">
                AND DUTY_DATE &gt;= #{deleteMap.dateStart}
            </if>
            <if test="deleteMap.dateEnd != null">
                and DUTY_DATE&lt;=#{deleteMap.dateEnd}
            </if>
            and ADD_TYPE = #{deleteMap.addType}
        </where>
    </delete>

    <!--删除时 修改对应的添加类型-->
    <update id="updateByAddType" parameterType="map">
        update user_duty set
        ADD_TYPE = replace(ADD_TYPE,CONCAT('-',#{addType}),''),
        ADD_TYPE = replace(ADD_TYPE,CONCAT(#{addType},'-'),'')
        <where>
            <if test="uid != null">
                uid = #{uid}
            </if>
            <if test="listUid != null">
                and uid IN
                <foreach collection="listUid" close=")" open="(" item="uid" separator="," index="index">
                    #{uid}
                </foreach>
            </if>
            <if test="listDate != null">
                and DUTY_DATE in
                <foreach collection="listDate" close=")" open="(" index="index" separator="," item="date">
                    #{date}
                </foreach>
            </if>
            <if test="dateStart!=null">
                AND DUTY_DATE &gt;= #{dateStart}
            </if>
            <if test="dateEnd!=null">
                and DUTY_DATE&lt;=#{dateEnd}
            </if>
        </where>
    </update>


    <update id="updateByAddType" parameterType="map" databaseId="kingbase">
        update user_duty set
        ADD_TYPE = replace(replace(ADD_TYPE, CONCAT('-', #{addType}), ''), CONCAT(#{addType}, '-'), '')
        <where>
            <if test="uid != null">
                uid = #{uid}
            </if>
            <if test="listUid != null">
                and uid IN
                <foreach collection="listUid" close=")" open="(" item="uid" separator="," index="index">
                    #{uid}
                </foreach>
            </if>
            <if test="listDate != null">
                and DUTY_DATE in
                <foreach collection="listDate" close=")" open="(" index="index" separator="," item="date">
                    #{date}
                </foreach>
            </if>
            <if test="dateStart!=null">
                AND DUTY_DATE &gt;= #{dateStart}
            </if>
            <if test="dateEnd!=null">
                and DUTY_DATE&lt;=#{dateEnd}
            </if>
        </where>
    </update>

    <select id="getLastUserDuty"  parameterType="int" resultMap="BaseResultMap">
        select * from user_duty
        <where>
            <if  test="uid!=null">
                uid = #{uid}
            </if>
        </where>
        order by udid desc limit 1;
    </select>

</mapper>