<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.attendance.AttendScheduleMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.attendance.AttendSchedule" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="ASID" property="asid" jdbcType="INTEGER" />
    <result column="ASNAME" property="asname" jdbcType="VARCHAR" />
    <result column="STATUS" property="status" jdbcType="INTEGER" />
    <result column="DATE_START" property="dateStart" jdbcType="VARCHAR" />
    <result column="DATE_END" property="dateEnd" jdbcType="VARCHAR" />
    <result column="YEAR_REPEAT" property="yearRepeat" jdbcType="CHAR" />
    <result column="MONDAY_ID" property="mondayId" jdbcType="CHAR" />
    <result column="TUESDAY_ID" property="tuesdayId" jdbcType="CHAR" />
    <result column="WEDNESDAY_ID" property="wednesdayId" jdbcType="CHAR" />
    <result column="THURSDAY_ID" property="thursdayId" jdbcType="CHAR" />
    <result column="FRIDAY_ID" property="fridayId" jdbcType="CHAR" />
    <result column="SATURDAY_ID" property="saturdayId" jdbcType="CHAR" />
    <result column="SUNDAY_ID" property="sundayId" jdbcType="CHAR" />
    <result column="UID" property="uid" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xoa.model.attendance.AttendScheduleWithBLOBs" extends="BaseResultMap" >
    <result column="DEPT_ID" property="deptId" jdbcType="LONGVARCHAR" />
    <result column="PRIV_ID" property="privId" jdbcType="LONGVARCHAR" />
    <result column="USER_ID" property="userId" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ASID, ASNAME, STATUS, DATE_START, DATE_END, YEAR_REPEAT, MONDAY_ID, TUESDAY_ID,
    WEDNESDAY_ID, THURSDAY_ID, FRIDAY_ID, SATURDAY_ID, SUNDAY_ID, UID
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    DEPT_ID, PRIV_ID, USER_ID
  </sql>

  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from attend_schedule
    where ASID = #{asid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from attend_schedule
    where ASID = #{asid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xoa.model.attendance.AttendScheduleWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into attend_schedule (ASID, ASNAME, STATUS, 
      DATE_START, DATE_END, YEAR_REPEAT, 
       MONDAY_ID, TUESDAY_ID, WEDNESDAY_ID,
      THURSDAY_ID, FRIDAY_ID, SATURDAY_ID, 
      SUNDAY_ID, UID, DEPT_ID, PRIV_ID,
      USER_ID)
    values (#{asid,jdbcType=INTEGER}, #{asname,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{dateStart,jdbcType=DATE}, #{dateEnd,jdbcType=DATE}, #{yearRepeat,jdbcType=CHAR}, 
      #{mondayId,jdbcType=CHAR}, #{tuesdayId,jdbcType=CHAR}, #{wednesdayId,jdbcType=CHAR},
      #{thursdayId,jdbcType=CHAR}, #{fridayId,jdbcType=CHAR}, #{saturdayId,jdbcType=CHAR}, 
      #{sundayId,jdbcType=CHAR},#{uid,jdbcType=INTEGER}, #{deptId,jdbcType=LONGVARCHAR}, #{privId,jdbcType=LONGVARCHAR},
      #{userId,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.attendance.AttendScheduleWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into attend_schedule
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="asid != null" >
        ASID,
      </if>
      <if test="asname != null" >
        ASNAME,
      </if>
      <if test="status != null" >
        STATUS,
      </if>
      <if test="dateStart != null" >
        DATE_START,
      </if>
      <if test="dateEnd != null" >
        DATE_END,
      </if>
      <if test="yearRepeat != null" >
        YEAR_REPEAT,
      </if>
      <if test="mondayId != null" >
        MONDAY_ID,
      </if>
      <if test="tuesdayId != null" >
        TUESDAY_ID,
      </if>
      <if test="wednesdayId != null" >
        WEDNESDAY_ID,
      </if>
      <if test="thursdayId != null" >
        THURSDAY_ID,
      </if>
      <if test="fridayId != null" >
        FRIDAY_ID,
      </if>
      <if test="saturdayId != null" >
        SATURDAY_ID,
      </if>
      <if test="sundayId != null" >
        SUNDAY_ID,
      </if>
      <if test="uid != null" >
        UID,
      </if>
      <if test="deptId != null" >
        DEPT_ID,
      </if>
      <if test="privId != null" >
        PRIV_ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="asid != null" >
        #{asid,jdbcType=INTEGER},
      </if>
      <if test="asname != null" >
        #{asname,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="dateStart != null" >
        #{dateStart,jdbcType=DATE},
      </if>
      <if test="dateEnd != null" >
        #{dateEnd,jdbcType=DATE},
      </if>
      <if test="yearRepeat != null" >
        #{yearRepeat,jdbcType=CHAR},
      </if>
      <if test="mondayId != null" >
        #{mondayId,jdbcType=CHAR},
      </if>
      <if test="tuesdayId != null" >
        #{tuesdayId,jdbcType=CHAR},
      </if>
      <if test="wednesdayId != null" >
        #{wednesdayId,jdbcType=CHAR},
      </if>
      <if test="thursdayId != null" >
        #{thursdayId,jdbcType=CHAR},
      </if>
      <if test="fridayId != null" >
        #{fridayId,jdbcType=CHAR},
      </if>
      <if test="saturdayId != null" >
        #{saturdayId,jdbcType=CHAR},
      </if>
      <if test="sundayId != null" >
        #{sundayId,jdbcType=CHAR},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=LONGVARCHAR},
      </if>
      <if test="privId != null" >
        #{privId,jdbcType=LONGVARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>


  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.attendance.AttendScheduleWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update attend_schedule
    <set >
      DATE_START = #{dateStart,jdbcType=DATE},
      DATE_END = #{dateEnd,jdbcType=DATE},
      <if test="asname != null" >
        ASNAME = #{asname,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        STATUS = #{status,jdbcType=INTEGER},
      </if>
      <if test="yearRepeat != null" >
        YEAR_REPEAT = #{yearRepeat,jdbcType=CHAR},
      </if>
      <if test="mondayId != null" >
        MONDAY_ID = #{mondayId,jdbcType=CHAR},
      </if>
      <if test="tuesdayId != null" >
        TUESDAY_ID = #{tuesdayId,jdbcType=CHAR},
      </if>
      <if test="wednesdayId != null" >
        WEDNESDAY_ID = #{wednesdayId,jdbcType=CHAR},
      </if>
      <if test="thursdayId != null" >
        THURSDAY_ID = #{thursdayId,jdbcType=CHAR},
      </if>
      <if test="fridayId != null" >
        FRIDAY_ID = #{fridayId,jdbcType=CHAR},
      </if>
      <if test="saturdayId != null" >
        SATURDAY_ID = #{saturdayId,jdbcType=CHAR},
      </if>
      <if test="sundayId != null" >
        SUNDAY_ID = #{sundayId,jdbcType=CHAR},
      </if>
      <if test="uid != null" >
        UID = #{uid,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        DEPT_ID = #{deptId,jdbcType=LONGVARCHAR},
      </if>
      <if test="privId != null" >
        PRIV_ID = #{privId,jdbcType=LONGVARCHAR},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ASID = #{asid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.attendance.AttendScheduleWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update attend_schedule
    set ASNAME = #{asname,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=INTEGER},
      DATE_START = #{dateStart,jdbcType=DATE},
      DATE_END = #{dateEnd,jdbcType=DATE},
      YEAR_REPEAT = #{yearRepeat,jdbcType=CHAR},
      MONDAY_ID = #{mondayId,jdbcType=CHAR},
      TUESDAY_ID = #{tuesdayId,jdbcType=CHAR},
      WEDNESDAY_ID = #{wednesdayId,jdbcType=CHAR},
      THURSDAY_ID = #{thursdayId,jdbcType=CHAR},
      FRIDAY_ID = #{fridayId,jdbcType=CHAR},
      SATURDAY_ID = #{saturdayId,jdbcType=CHAR},
      SUNDAY_ID = #{sundayId,jdbcType=CHAR},
      UID = #{uid,jdbcType=INTEGER},
      DEPT_ID = #{deptId,jdbcType=LONGVARCHAR},
      PRIV_ID = #{privId,jdbcType=LONGVARCHAR},
      USER_ID = #{userId,jdbcType=LONGVARCHAR}
    where ASID = #{asid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.attendance.AttendSchedule" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update attend_schedule
    set ASNAME = #{asname,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=INTEGER},
      DATE_START = #{dateStart,jdbcType=DATE},
      DATE_END = #{dateEnd,jdbcType=DATE},
      YEAR_REPEAT = #{yearRepeat,jdbcType=CHAR},
      MONDAY_ID = #{mondayId,jdbcType=CHAR},
      TUESDAY_ID = #{tuesdayId,jdbcType=CHAR},
      WEDNESDAY_ID = #{wednesdayId,jdbcType=CHAR},
      THURSDAY_ID = #{thursdayId,jdbcType=CHAR},
      FRIDAY_ID = #{fridayId,jdbcType=CHAR},
      SATURDAY_ID = #{saturdayId,jdbcType=CHAR},
      SUNDAY_ID = #{sundayId,jdbcType=CHAR},
      UID = #{uid,jdbcType=INTEGER}
    where ASID = #{asid,jdbcType=INTEGER}
  </update>

 <!-- /**
  * 获取全部排班
  * @return
  */
  List<AttendScheduleWithBLOBs> selectAttendScheduleList();-->
  <select id="selectAttendScheduleList" resultMap="ResultMapWithBLOBs">
   SELECT * FROM attend_schedule
  </select>

 <!-- /**
  * 是否启用？0：否 1：是
  */
  int updateAttendScheduleStatus(Integer status);-->

  <update id="updateAttendScheduleStatus">
     UPDATE attend_schedule SET STATUS=#{status}
    <if test="status == 1">
      , OPEN_TIME =  NOW()
    </if> where ASID=#{asid}
  </update>
  <!--int freedomScheduleQueryByDeptCount(String[] deptId);-->
  <select id="freedomScheduleQueryByDeptCount" parameterType="String" resultType="int">
    SELECT count(*) FROM USER
    WHERE 1=1 AND (NOT_LOGIN = 0 OR NOT_MOBILE_LOGIN = 0)
    AND DEPT_ID IN
    <foreach collection="deptIds" index="index" separator="," item="deptId" open="(" close=")">
      #{deptId}
    </foreach>
    AND DEPT_ID!='0'
  </select>


  <!--/**
  * 自由排班查询(通过部门)
  * @param deptId
  * @return
  */
  List<Users> freedomScheduleQueryByDept(String[] deptId);-->
  <select id="freedomScheduleQueryByDept" parameterType="java.util.Map" resultType="com.xoa.model.users.Users">
    SELECT UID,USER_ID,USER_NAME,DEPARTMENT.DEPT_NO,DEPARTMENT.DEPT_NAME as deptName FROM USER LEFT JOIN DEPARTMENT ON USER.DEPT_ID = DEPARTMENT.DEPT_ID
    WHERE 1=1 AND (NOT_LOGIN = 0 OR NOT_MOBILE_LOGIN = 0)
    AND USER.DEPT_ID IN
    <foreach collection="deptId.deptIds" index="index" separator="," item="dept" open="(" close=")">
      #{dept}
    </foreach>
    AND USER.DEPT_ID!='0'
    ORDER BY DEPARTMENT.DEPT_NO,USER_PRIV_NO,USER_NO,USER_NAME
    <if test="deptId.startNum!=null and deptId.endNum!=null">
      limit #{deptId.startNum},#{deptId.endNum}
    </if>

  </select>

 <!-- int freedomScheduleQueryByUserCount(String[] userId);-->
  <select id="freedomScheduleQueryByUserCount" parameterType="String"  resultType="int">
    SELECT count(*) FROM USER
    WHERE 1=1 AND (NOT_LOGIN = 0 OR NOT_MOBILE_LOGIN = 0)
    AND USER_ID IN
    <foreach collection="userIds" index="index" separator="," item="userId" open="(" close=")">
      #{userId}
    </foreach>
    AND DEPT_ID!='0'
  </select>
<!--
  /**
  * 自由排班查询(通过人员)
  * @param userId
  * @return
  */
  List<Users> freedomScheduleQueryByUser(String[] userId);-->
  <select id="freedomScheduleQueryByUser" parameterType="java.util.Map"  resultType="com.xoa.model.users.Users">
    SELECT UID,USER_ID,USER_NAME,DEPARTMENT.DEPT_NO,DEPARTMENT.DEPT_NAME  FROM USER LEFT JOIN DEPARTMENT ON USER.DEPT_ID = DEPARTMENT.DEPT_ID
    WHERE 1=1 AND (NOT_LOGIN = 0 OR NOT_MOBILE_LOGIN = 0)
    AND USER_ID IN
    <foreach collection="userId.userIds" index="index" separator="," item="user" open="(" close=")">
      #{user}
    </foreach>
    AND USER.DEPT_ID!='0'
    ORDER BY DEPARTMENT.DEPT_NO,USER_PRIV_NO,USER_NO,USER_NAME
    <if test="userId.startNum!=null and userId.endNum!=null">
      limit #{userId.startNum},#{userId.endNum}
    </if>

  </select>

  <!--
  获取启动的排班
  -->
  <select id="getStatusOneAttendSchedule" resultMap="ResultMapWithBLOBs">
    SELECT * FROM attend_schedule WHERE  STATUS = '1'
  </select>

  <!--/**
  * 获取部门下人员
  */
  public List<Integer> getUidList(String deptIds);-->
  <select id="getUidListByDeptIds" parameterType="map" resultType="Integer">
    select UID from USER
    <where>
      <if test="deptMap.userUsers==null or deptMap.userUsers==''">
        (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
      </if>
      AND DEPT_ID in
      <foreach collection="deptMap.deptIds" index="index" separator="," item="deptId" open="(" close=")">
        #{deptId}
      </foreach>
    </where>

  </select>

    <select id="getUidListByDeptIds" parameterType="map" resultType="Integer" databaseId="kingbase">
        select UID from "USER"
        <where>
            <if test="deptMap.userUsers==null or deptMap.userUsers==''">
                (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
            </if>
            AND DEPT_ID in
            <foreach collection="deptMap.deptIds" index="index" separator="," item="deptId" open="(" close=")">
                #{deptId}
            </foreach>
        </where>

    </select>
  <!--/**
 * 获取角色下人员
 */
 public List<Integer> getUidListByPrivIds(String privIds);-->
  <select id="getUidListByPrivIds" parameterType="String" resultType="Integer">
    select UID from USER
    <where>
      <if test="privMap.userUsers==null or privMap.userUsers==''">
        (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
      </if>
      AND USER_PRIV in
      <foreach collection="privMap.privIds" index="index" separator="," item="privId" open="(" close=")">
        #{privId}
      </foreach>
    </where>

  </select>


  <select id="getUidListByPrivIds" parameterType="String" resultType="Integer" databaseId="kingbase">
    select UID from "USER"
    <where>
      <if test="privMap.userUsers==null or privMap.userUsers==''">
        (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
      </if>
      AND USER_PRIV in
      <foreach collection="privMap.privIds" index="index" separator="," item="privId" open="(" close=")">
        #{privId}
      </foreach>
    </where>

  </select>

  <!--/**
 * 获取userId人员
 */
 public List<Integer> getUidListByUserIds(String userIds);-->
  <select id="getUidListByUserIds" parameterType="String" resultType="Integer">
    select UID from USER where (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
    AND USER_ID in
    <foreach collection="array" index="index" separator="," item="userId" open="(" close=")">
      #{userId}
    </foreach>
  </select>

  <select id="getUidListByUserIds" parameterType="String" resultType="Integer" databaseId="kingbase">
    select UID from "USER" where (NOT_LOGIN!='1' or NOT_MOBILE_LOGIN!='1')
    AND USER_ID in
    <foreach collection="array" index="index" separator="," item="userId" open="(" close=")">
      #{userId}
    </foreach>
  </select>

  <!--/**
  * 通过类型查找排班对象
  * @param dutyType
  * @return
  */
  public AttendScheduleWithBLOBs getAttendScheduleByUserDutyType(Integer dutyType);-->
  <select id="getAttendScheduleByUserDutyType" parameterType="Integer" resultMap="ResultMapWithBLOBs">
    SELECT ASID,ASNAME FROM attend_schedule WHERE ASID=#{dutyType}

  </select>

<!--  /**
  * 获取所有的uid
  * @return
  */
  public List<Integer> getUidAll();-->
  <select id="getUidAll" resultType="Integer">
      SELECT UID FROM user
  </select>


 <!-- //获取部门名
  List<String> getDeptNames(String deptId);-->
  <select id="getDeptNames" parameterType="String" resultType="String">
    SELECT DEPT_NAME FROM department WHERE FIND_IN_SET(DEPT_ID,#{deptId})
    AND DEPT_ID IS NOT NULL AND DEPT_ID !=''
  </select>

  <select id="getDeptNames" parameterType="String" resultType="String" databaseId="kingbase">
    SELECT DEPT_NAME FROM department WHERE  ','||#{deptId}::VARCHAR ||',' LIKE '%,'||DEPT_ID||',%'
    AND DEPT_ID IS NOT NULL
  </select>

  <!--//获取角色名
  List<String> getprivNames(String privId);-->
  <select id="getprivNames" parameterType="String" resultType="String">
  SELECT PRIV_NAME FROM user_priv WHERE FIND_IN_SET(USER_PRIV,#{privId})
  AND USER_PRIV IS NOT NULL AND USER_PRIV !=''
  </select>

  <select id="getprivNames" parameterType="String" resultType="String" databaseId="kingbase">
    SELECT PRIV_NAME
    FROM user_priv
    WHERE ','||#{privId}::VARCHAR ||',' LIKE '%,'||USER_PRIV||',%'
    AND USER_PRIV IS NOT NULL
  </select>

  <!--//获取用户名
  List<String> getuserNames(String userId);-->
  <select id="getuserNames" parameterType="String" resultType="String">
  SELECT USER_NAME FROM USER WHERE FIND_IN_SET(USER_ID,#{userId})
  AND USER_ID IS NOT NULL AND USER_ID !=''
  </select>

    <select id="getuserNames" parameterType="String" resultType="String" databaseId="kingbase">
      SELECT USER_NAME FROM "USER" WHERE ','||#{userId}::VARCHAR ||',' LIKE '%,'||USER_ID||',%'
      AND USER_ID IS NOT NULL
    </select>

  <!--//根据map条件获取数据
  List<AttendScheduleWithBLOBs> getAttendScheduleByMap(Map map);-->
<select id="getAttendScheduleByMap" resultMap="ResultMapWithBLOBs" parameterType="map">
  SELECT
	*
  FROM
	attend_schedule
  <where>
    <if test="privId!=null">
      (PRIV_ID LIKE concat( '%,',#{privId}, ',%' ) or PRIV_ID LIKE concat(#{privId}, ',%' ) )
    </if>
    <if test="deptId!=null">
      AND (DEPT_ID LIKE concat( '%,', #{deptId}, ',%' ) or DEPT_ID LIKE concat(#{deptId}, ',%' ))
    </if>
    <if test="status!=null">
      AND STATUS =#{status}
    </if>
    <if test="date!=null">
      and DATE_END>#{date}
    </if>
    <if test="userId !=null">
      AND (USER_ID LIKE concat( '%,', #{userId}, ',%' ) or USER_ID LIKE concat(#{userId}, ',%' ))
    </if>
  </where>
</select>
 <!-- //查看是否有冲突
  List<AttendScheduleWithBLOBs> getAttendScheduleClash(Map map);-->
  <select id="selectAttendScheduleClash" resultMap="ResultMapWithBLOBs" parameterType="map">
    SELECT
    *
    FROM
    attend_schedule
    <where>
      (
      (USER_ID LIKE concat( '%,', #{userId}, ',%' ) or USER_ID LIKE concat(#{userId}, ',%' ))
      <if test="privId!=null">
        or (PRIV_ID LIKE concat( '%,', #{privId}, ',%' ) or PRIV_ID LIKE concat(#{privId}, ',%' ))
      </if>
      <if test="deptId!=null">
        or (DEPT_ID LIKE concat( '%', #{deptId}, ',%' ) or DEPT_ID LIKE concat( #{deptId}, ',%' ))
      </if>
      )
      AND STATUS = 1
    </where>
  </select>
</mapper>