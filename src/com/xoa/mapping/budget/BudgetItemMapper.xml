<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xoa.dao.budget.BudgetItemMapper">
  <resultMap id="BaseResultMap" type="com.xoa.model.budget.BudgetItem">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="Budget_id" jdbcType="INTEGER" property="budgetId" />
    <result column="budget_item_name" jdbcType="VARCHAR" property="budgetItemName" />
    <result column="budget_item_no" jdbcType="VARCHAR" property="budgetItemNo" />
    <result column="budget_item_begindate" jdbcType="TIMESTAMP" property="budgetItemBegindate" />
    <result column="budget_item_enddate" jdbcType="TIMESTAMP" property="budgetItemEnddate" />
    <result column="year" jdbcType="VARCHAR" property="year" />
    <result column="Input_time" jdbcType="TIMESTAMP" property="inputTime" />
    <result column="dept_id" jdbcType="INTEGER" property="deptId" />
    <result column="Line_No" jdbcType="VARCHAR" property="lineNo" />
    <result column="Prive_item" jdbcType="VARCHAR" property="priveItem" />
    <result column="Item_money" jdbcType="DECIMAL" property="itemMoney" />
    <result column="Item_manager" jdbcType="VARCHAR" property="itemManager" />
    <result column="Item_executer" jdbcType="VARCHAR" property="itemExecuter" />
    <result column="Item_desc" jdbcType="VARCHAR" property="itemDesc" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="user_phone" jdbcType="VARCHAR" property="userPhone" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="quota_classify" jdbcType="VARCHAR" property="quotaClassify" />
    <result column="remaining_amount" jdbcType="DECIMAL" property="remainingAmount" />
    <result column="Attachment_name" jdbcType="LONGVARCHAR" property="attachmentName" />
    <result column="Attachment_id" jdbcType="LONGVARCHAR" property="attachmentId" />
    <result column="run_id" property="runId" javaType="integer" />
    <result column="run_name" property="runName" javaType="string" />
    <result column="dept_name" property="deptName" javaType="string" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    Budget_id, budget_item_name, budget_item_no, budget_item_begindate, budget_item_enddate,
    year, Input_time, dept_id, Line_No, Prive_item, Item_money, Item_manager, Item_executer,
    Item_desc, user_id, user_phone, status, quota_classify, remaining_amount
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    Attachment_name, Attachment_id
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.xoa.model.budget.BudgetItemExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from budget_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.xoa.model.budget.BudgetItemExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from budget_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from budget_item
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from budget_item
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xoa.model.budget.BudgetItemExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from budget_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.model.budget.BudgetItem">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into budget_item (Budget_id, budget_item_name, budget_item_no,
    budget_item_begindate, budget_item_enddate, year,
    Input_time, dept_id, Line_No,
    Prive_item, Item_money, Item_manager,
    Item_executer, Item_desc, user_id,
    user_phone, status, quota_classify,
    remaining_amount, Attachment_name,
    Attachment_id)
    values (#{budgetId,jdbcType=INTEGER}, #{budgetItemName,jdbcType=VARCHAR}, #{budgetItemNo,jdbcType=VARCHAR},
    #{budgetItemBegindate,jdbcType=TIMESTAMP}, #{budgetItemEnddate,jdbcType=TIMESTAMP}, #{year,jdbcType=VARCHAR},
    #{inputTime,jdbcType=TIMESTAMP}, #{deptId,jdbcType=INTEGER}, #{lineNo,jdbcType=VARCHAR},
    #{priveItem,jdbcType=VARCHAR}, #{itemMoney,jdbcType=DECIMAL}, #{itemManager,jdbcType=VARCHAR},
    #{itemExecuter,jdbcType=VARCHAR}, #{itemDesc,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
    #{userPhone,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{quotaClassify,jdbcType=VARCHAR},
    #{remainingAmount,jdbcType=DECIMAL}, #{delFlag,jdbcType=INTEGER}, #{attachmentName,jdbcType=LONGVARCHAR},
    #{attachmentId,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.budget.BudgetItem" >
    <selectKey keyProperty="budgetId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into budget_item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="budgetId != null" >
        Budget_id,
      </if>
      <if test="budgetItemNo != null" >
        budget_item_no,
      </if>
      <if test="budgetItemName!= null">
        budget_item_name,
      </if>
      <if test="budgetItemBegindate != null" >
        budget_item_begindate,
      </if>
      <if test="budgetItemEnddate != null" >
        budget_item_enddate,
      </if>
      <if test="inputTime != null" >
        Input_time,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="lineNo != null" >
        Line_No,
      </if>
      <if test="priveItem != null" >
        Prive_item,
      </if>
      <if test="itemMoney != null" >
        Item_money,
      </if>
      <if test="remainingAmount != null" >
        remaining_amount,
      </if>
      <if test="itemManager != null" >
        Item_manager,
      </if>
      <if test="itemExecuter != null" >
        Item_executer,
      </if>
      <if test="itemDesc != null" >
        Item_desc,
      </if>
      <if test="attachmentName != null" >
        Attachment_name,
      </if>
      <if test="attachmentId != null" >
        Attachment_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userPhone != null" >
        user_phone,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="quotaClassify != null" >
        quota_classify,
      </if>
      <if test="year!=null ">
        year,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="budgetId != null" >
        #{budgetId,jdbcType=INTEGER},
      </if>
      <if test="budgetItemNo != null" >
        #{budgetItemNo,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemName!= null">
        #{budgetItemName,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemBegindate != null" >
        #{budgetItemBegindate,jdbcType=TIMESTAMP},
      </if>
      <if test="budgetItemEnddate != null" >
        #{budgetItemEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="inputTime != null" >
        #{inputTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="lineNo != null" >
        #{lineNo,jdbcType=VARCHAR},
      </if>
      <if test="priveItem != null" >
        #{priveItem,jdbcType=VARCHAR},
      </if>
      <if test="itemMoney != null" >
        #{itemMoney,jdbcType=VARCHAR},
      </if>
      <if test="remainingAmount != null" >
        #{remainingAmount,jdbcType=VARCHAR},
      </if>
      <if test="itemManager != null" >
        #{itemManager,jdbcType=VARCHAR},
      </if>
      <if test="itemExecuter != null" >
        #{itemExecuter,jdbcType=VARCHAR},
      </if>
      <if test="itemDesc != null" >
        #{itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="attachmentName != null" >
        #{attachmentName,jdbcType=VARCHAR},
      </if>
      <if test="attachmentId != null" >
        #{attachmentId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null" >
        #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="quotaClassify != null" >
        #{quotaClassify,jdbcType=VARCHAR},
      </if>
      <if test="year!=null ">
        #{year},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xoa.model.budget.BudgetItemExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from budget_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    <set>
      <if test="record.budgetId != null">
        Budget_id = #{record.budgetId,jdbcType=INTEGER},
      </if>
      <if test="record.budgetItemName != null">
        budget_item_name = #{record.budgetItemName,jdbcType=VARCHAR},
      </if>
      <if test="record.budgetItemNo != null">
        budget_item_no = #{record.budgetItemNo,jdbcType=VARCHAR},
      </if>
      <if test="record.budgetItemBegindate != null">
        budget_item_begindate = #{record.budgetItemBegindate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.budgetItemEnddate != null">
        budget_item_enddate = #{record.budgetItemEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=VARCHAR},
      </if>
      <if test="record.inputTime != null">
        Input_time = #{record.inputTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deptId != null">
        dept_id = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.lineNo != null">
        Line_No = #{record.lineNo,jdbcType=VARCHAR},
      </if>
      <if test="record.priveItem != null">
        Prive_item = #{record.priveItem,jdbcType=VARCHAR},
      </if>
      <if test="record.itemMoney != null">
        Item_money = #{record.itemMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.itemManager != null">
        Item_manager = #{record.itemManager,jdbcType=VARCHAR},
      </if>
      <if test="record.itemExecuter != null">
        Item_executer = #{record.itemExecuter,jdbcType=VARCHAR},
      </if>
      <if test="record.itemDesc != null">
        Item_desc = #{record.itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.userPhone != null">
        user_phone = #{record.userPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.quotaClassify != null">
        quota_classify = #{record.quotaClassify,jdbcType=VARCHAR},
      </if>
      <if test="record.remainingAmount != null">
        remaining_amount = #{record.remainingAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.attachmentName != null">
        Attachment_name = #{record.attachmentName,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.attachmentId != null">
        Attachment_id = #{record.attachmentId,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    set Budget_id = #{record.budgetId,jdbcType=INTEGER},
    budget_item_name = #{record.budgetItemName,jdbcType=VARCHAR},
    budget_item_no = #{record.budgetItemNo,jdbcType=VARCHAR},
    budget_item_begindate = #{record.budgetItemBegindate,jdbcType=TIMESTAMP},
    budget_item_enddate = #{record.budgetItemEnddate,jdbcType=TIMESTAMP},
    year = #{record.year,jdbcType=VARCHAR},
    Input_time = #{record.inputTime,jdbcType=TIMESTAMP},
    dept_id = #{record.deptId,jdbcType=INTEGER},
    Line_No = #{record.lineNo,jdbcType=VARCHAR},
    Prive_item = #{record.priveItem,jdbcType=VARCHAR},
    Item_money = #{record.itemMoney,jdbcType=DECIMAL},
    Item_manager = #{record.itemManager,jdbcType=VARCHAR},
    Item_executer = #{record.itemExecuter,jdbcType=VARCHAR},
    Item_desc = #{record.itemDesc,jdbcType=VARCHAR},
    user_id = #{record.userId,jdbcType=VARCHAR},
    user_phone = #{record.userPhone,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=VARCHAR},
    quota_classify = #{record.quotaClassify,jdbcType=VARCHAR},
    remaining_amount = #{record.remainingAmount,jdbcType=DECIMAL},
    Attachment_name = #{record.attachmentName,jdbcType=LONGVARCHAR},
    Attachment_id = #{record.attachmentId,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    set Budget_id = #{record.budgetId,jdbcType=INTEGER},
    budget_item_name = #{record.budgetItemName,jdbcType=VARCHAR},
    budget_item_no = #{record.budgetItemNo,jdbcType=VARCHAR},
    budget_item_begindate = #{record.budgetItemBegindate,jdbcType=TIMESTAMP},
    budget_item_enddate = #{record.budgetItemEnddate,jdbcType=TIMESTAMP},
    year = #{record.year,jdbcType=VARCHAR},
    Input_time = #{record.inputTime,jdbcType=TIMESTAMP},
    dept_id = #{record.deptId,jdbcType=INTEGER},
    Line_No = #{record.lineNo,jdbcType=VARCHAR},
    Prive_item = #{record.priveItem,jdbcType=VARCHAR},
    Item_money = #{record.itemMoney,jdbcType=DECIMAL},
    Item_manager = #{record.itemManager,jdbcType=VARCHAR},
    Item_executer = #{record.itemExecuter,jdbcType=VARCHAR},
    Item_desc = #{record.itemDesc,jdbcType=VARCHAR},
    user_id = #{record.userId,jdbcType=VARCHAR},
    user_phone = #{record.userPhone,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=VARCHAR},
    quota_classify = #{record.quotaClassify,jdbcType=VARCHAR},
    remaining_amount = #{record.remainingAmount,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.budget.BudgetItem">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    <set>
      <if test="budgetItemName != null">
        budget_item_name = #{budgetItemName,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemNo != null">
        budget_item_no = #{budgetItemNo,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemBegindate != null">
        budget_item_begindate = #{budgetItemBegindate,jdbcType=TIMESTAMP},
      </if>
      <if test="budgetItemEnddate != null">
        budget_item_enddate = #{budgetItemEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="year != null">
        year = #{year,jdbcType=VARCHAR},
      </if>
      <if test="inputTime != null">
        Input_time = #{inputTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="lineNo != null">
        Line_No = #{lineNo,jdbcType=VARCHAR},
      </if>
      <if test="priveItem != null">
        Prive_item = #{priveItem,jdbcType=VARCHAR},
      </if>
      <if test="itemMoney != null">
        Item_money = #{itemMoney,jdbcType=DECIMAL},
      </if>
      <if test="itemManager != null">
        Item_manager = #{itemManager,jdbcType=VARCHAR},
      </if>
      <if test="itemExecuter != null">
        Item_executer = #{itemExecuter,jdbcType=VARCHAR},
      </if>
      <if test="itemDesc != null">
        Item_desc = #{itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null">
        user_phone = #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="quotaClassify != null">
        quota_classify = #{quotaClassify,jdbcType=VARCHAR},
      </if>
      <if test="remainingAmount != null">
        remaining_amount = #{remainingAmount,jdbcType=DECIMAL},
      </if>
      <if test="attachmentName != null">
        Attachment_name = #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentId != null">
        Attachment_id = #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.budget.BudgetItem">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    set budget_item_name = #{budgetItemName,jdbcType=VARCHAR},
    budget_item_no = #{budgetItemNo,jdbcType=VARCHAR},
    budget_item_begindate = #{budgetItemBegindate,jdbcType=TIMESTAMP},
    budget_item_enddate = #{budgetItemEnddate,jdbcType=TIMESTAMP},
    year = #{year,jdbcType=VARCHAR},
    Input_time = #{inputTime,jdbcType=TIMESTAMP},
    dept_id = #{deptId,jdbcType=INTEGER},
    Line_No = #{lineNo,jdbcType=VARCHAR},
    Prive_item = #{priveItem,jdbcType=VARCHAR},
    Item_money = #{itemMoney,jdbcType=DECIMAL},
    Item_manager = #{itemManager,jdbcType=VARCHAR},
    Item_executer = #{itemExecuter,jdbcType=VARCHAR},
    Item_desc = #{itemDesc,jdbcType=VARCHAR},
    user_id = #{userId,jdbcType=VARCHAR},
    user_phone = #{userPhone,jdbcType=VARCHAR},
    status = #{status,jdbcType=VARCHAR},
    quota_classify = #{quotaClassify,jdbcType=VARCHAR},
    remaining_amount = #{remainingAmount,jdbcType=DECIMAL},
    Attachment_name = #{attachmentName,jdbcType=LONGVARCHAR},
    Attachment_id = #{attachmentId,jdbcType=LONGVARCHAR}
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.budget.BudgetItem">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update budget_item
    set budget_item_name = #{budgetItemName,jdbcType=VARCHAR},
    budget_item_no = #{budgetItemNo,jdbcType=VARCHAR},
    budget_item_begindate = #{budgetItemBegindate,jdbcType=TIMESTAMP},
    budget_item_enddate = #{budgetItemEnddate,jdbcType=TIMESTAMP},
    year = #{year,jdbcType=VARCHAR},
    Input_time = #{inputTime,jdbcType=TIMESTAMP},
    dept_id = #{deptId,jdbcType=INTEGER},
    Line_No = #{lineNo,jdbcType=VARCHAR},
    Prive_item = #{priveItem,jdbcType=VARCHAR},
    Item_money = #{itemMoney,jdbcType=DECIMAL},
    Item_manager = #{itemManager,jdbcType=VARCHAR},
    Item_executer = #{itemExecuter,jdbcType=VARCHAR},
    Item_desc = #{itemDesc,jdbcType=VARCHAR},
    user_id = #{userId,jdbcType=VARCHAR},
    user_phone = #{userPhone,jdbcType=VARCHAR},
    status = #{status,jdbcType=VARCHAR},
    quota_classify = #{quotaClassify,jdbcType=VARCHAR},
    remaining_amount = #{remainingAmount,jdbcType=DECIMAL}
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>

  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.xoa.model.budget.BudgetItem">
    <result column="is_payment" jdbcType="VARCHAR" property="isPayment" />
    <result column="actual_expenditure" jdbcType="VARCHAR" property="actualExpenditure" />
    <result column="application_date" jdbcType="DATE" property="applicationDate" />
    <result column="amount_num" jdbcType="VARCHAR" property="amountNum" />
    <result column="prcsId" javaType="string" property="prcsId" />
    <result column="flowStep" javaType="string" property="flowStep" />
    <!--补充预支出金额-->
    <result column="advance" javaType="java.math.BigDecimal" property="allAdvance" />
  </resultMap>

  <update id="updateDelByPrimaryKey" parameterType="java.lang.Integer">
      update budget_item set del_Flag= 1 where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>

  <update id="updatefhByPrimaryKey" parameterType="java.lang.Integer">
      update budget_item set del_Flag= 0 where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>

  <update id="upBudgetItemById" parameterType="java.lang.Integer">
    update budget_item
    <set>
      <if test="budgetItemNo != null">
        budget_item_no = #{budgetItemNo,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemName!= null">
        budget_item_name=#{budgetItemName,jdbcType=VARCHAR},
      </if>
      <if test="budgetItemBegindate != null">
        budget_item_begindate = #{budgetItemBegindate,jdbcType=TIMESTAMP},
      </if>
      <if test="budgetItemEnddate != null">
        budget_item_enddate = #{budgetItemEnddate,jdbcType=TIMESTAMP},
      </if>
      <if test="inputTime != null">
        Input_time = #{inputTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=VARCHAR},
      </if>
      <if test="lineNo != null">
        Line_No = #{lineNo,jdbcType=VARCHAR},
      </if>
      <if test="priveItem != null">
        Prive_item = #{priveItem,jdbcType=VARCHAR},
      </if>
      <if test="itemMoney != null">
        Item_money = #{itemMoney,jdbcType=VARCHAR},
      </if>
      <if test="itemManager != null">
        Item_manager = #{itemManager,jdbcType=VARCHAR},
      </if>
      <if test="itemExecuter != null">
        Item_executer = #{itemExecuter,jdbcType=VARCHAR},
      </if>
      <if test="itemDesc != null">
        Item_desc = #{itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="attachmentName != null">
        Attachment_name = #{attachmentName,jdbcType=VARCHAR},
      </if>
      <if test="attachmentId != null">
        Attachment_id = #{attachmentId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null">
        user_phone = #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="year!=null ">
        year = #{year}
      </if>
    </set>
    where Budget_id = #{budgetId,jdbcType=INTEGER}
  </update>

  <select id="selAllBudget" parameterType="map" resultMap="BaseResultMap">
    SELECT bi.*,dept.dept_name FROM budget_item bi,department dept
    <where>
      dept.dept_id = bi.dept_id
      AND del_flag =0
      <if test="year!=null and year!=''">
        AND year = #{year}
      </if>
      <if test="itemExecuter!=null and itemExecuter!=''">
        AND  (bi.Item_executer like concat('%',#{itemExecuter},'%') OR
        bi.Item_executer like concat(#{itemExecuter},'%') OR
        bi.Item_executer like concat('%',#{itemExecuter}))
      </if>
      <if test="newDate!=null and newDate!=''">
        AND #{newDate} BETWEEN bi.budget_item_begindate and bi.budget_item_enddate
      </if>
      <if test="deptId != null">
        AND bi.dept_id IN
        <foreach collection="deptId" open="(" separator="," close=")" index="index" item="id">
          #{id}
        </foreach>
      </if>
    </where>
    ORDER BY Budget_id DESC
  </select>

  <select id="selAllXmBudgetItem" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    SELECT bi.*,bp.is_payment FROM
	budget_item bi,
	budgeting_process bp
    where  bp.Budget_id = bi.Budget_id and bi.Budget_id = #{budgetId,jdbcType=INTEGER}

  </select>

  <select id="selDelAllBudget" parameterType="map" resultMap="BaseResultMap">
    SELECT bi.*,dept.dept_name FROM budget_item bi,department dept where dept.dept_id = bi.dept_id AND del_flag =1
    <if test="year!=null and year!=''">
      AND year = #{year}
    </if>
    ORDER BY Budget_id DESC
  </select>

  <select id="selBudgetItemById" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    SELECT bi.*,bp.actual_expenditure,d.DEPT_NAME dept_name FROM budget_item bi LEFT JOIN budgeting_process bp on bi.Budget_id=bp.Budget_id,department d WHERE bi.dept_id = d.DEPT_ID AND bi.Budget_id= #{budgetId,jdbcType=INTEGER} order by bi.Budget_id desc LIMIT 1
  </select>
  <select id="selBudgetItemById1" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
       SELECT bi.*,sum( t.actual_expenditure ) AS actual_expenditure ,dept.dept_name
    FROM budget_item  bi ,department dept , budgeting_process  t
    WHERE  t.Budget_id = bi.Budget_id AND bi.Budget_id=#{budgetId}

  </select>

  <select id="selAllBudget1" resultMap="BaseResultMap">
   SELECT b.*,d.DEPT_NAME deptName FROM budget_item b,department d WHERE b.dept_id = d.DEPT_ID AND b.del_flag =0
  </select>

  <select id="selStatement" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    bi.budget_item_name,
    bi.budget_item_no,
    bi.budget_item_begindate,
    bi.budget_item_enddate,
    bi.Input_time,
    bi.Line_No,
    bi.Prive_item,
    bi.Item_money,
    bi.Item_manager,
    bi.Item_executer,
    bi.Item_desc,
    bi.user_id,
    bi.user_phone,
    bi.status,
    bi.quota_classify,
    bi.remaining_amount,
    bp.application_date,
    bp.actual_expenditure,
    bp.is_payment,bp.allow,
    bp.applicant,
    bp.dept_id,
    bp.run_id,
    fr.flow_id flowId,
    bi.year,
    frp.FLOW_PRCS prcsId,
    frp.PRCS_ID flowStep,
    dept.dept_name
    FROM
    department dept,
    budget_item bi,
    budgeting_process bp

    INNER JOIN flow_run_prcs frp ON frp.RUN_ID = bp.run_id

    AND frp.ID = (
    SELECT
    MAX(frp.ID)
    FROM
    flow_run_prcs frp
    WHERE
    frp.RUN_ID = bp.run_id  )
    INNER JOIN flow_run fr ON fr.RUN_ID = bp.run_id
    INNER JOIN flow_process fp ON fp.FLOW_ID = fr.FLOW_ID
    AND frp.FLOW_PRCS = fp.PRCS_ID

    WHERE
    bp.Budget_id = bi.Budget_id
    AND  bi.del_flag != 1
    AND fr.RUN_ID = bp.run_id
    AND dept.dept_id = bp.dept_id
    <if test="budgetItemBegindate!=null and budgetItemBegindate!=''">
      and  bi.budget_item_begindate &gt;= #{budgetItemBegindate}
    </if>
    <if test="budgetItemEnddate!=null and budgetItemEnddate!=''">
      and bi.budget_item_enddate &lt;= #{budgetItemEnddate}
    </if>
    <if test="year!=null and year!=''">
      and bi.year = #{year}
    </if>
    <if test="deptId!=null and deptId!=''">
      and bp.dept_id=#{deptId}
    </if>
    <if test="allow!=null and allow!=''">
      and bp.allow=#{allow}
    </if>

    <!--<if test="itemExecuters!=null ">
      and
      <foreach item="userId" collection="itemExecuters" index="index" open="( " close=")">
        <trim suffixOverrides="or">
          <if test="userId!=null and userId != '' ">
            bi.Item_executer LIKE CONCAT('%,',#{userId},',%')
            OR bi.Item_executer LIKE CONCAT(#{userId},',%')
          </if>
        </trim>
      </foreach>
    </if>-->

    <if test="itemExecuter!=null and itemExecuter!=''">
      and bi.Item_executer like CONCAT('%',#{itemExecuter},'%')
    </if>

    <if test="budgetItemNames!=null ">
      and bi.budget_id in
      <foreach close=")" collection="budgetItemNames" item="name" open="(" separator=",">
        <if test="name!=null and name != '' ">
          #{name}
        </if>
      </foreach>
    </if>

    GROUP BY bp.run_id
    ORDER BY bp.application_date DESC
    limit #{page},#{pageSize}

  </select>

  <select id="selStatementCount" parameterType="map" resultType="int">
    SELECT count(*)
    FROM
    budget_item bi,
    budgeting_process bp

    INNER JOIN flow_run_prcs frp ON frp.RUN_ID = bp.run_id

    AND frp.ID = (
    SELECT
    MAX(frp.ID)
    FROM
    flow_run_prcs frp
    WHERE
    frp.RUN_ID = bp.run_id  )
    INNER JOIN flow_run fr ON fr.RUN_ID = bp.run_id
    INNER JOIN flow_process fp ON fp.FLOW_ID = fr.FLOW_ID
    AND frp.FLOW_PRCS = fp.PRCS_ID

    WHERE
    bp.Budget_id = bi.Budget_id
    AND  bi.del_flag != 1
    AND fr.RUN_ID = bp.run_id

    <if test="budgetItemBegindate!=null and budgetItemBegindate!=''">
      and  bi.budget_item_begindate &gt;= #{budgetItemBegindate}
    </if>
    <if test="budgetItemEnddate!=null and budgetItemEnddate!=''">
      and bi.budget_item_enddate &lt;= #{budgetItemEnddate}
    </if>
    <if test="year!=null and year!=''">
      and bi.year = #{year}
    </if>
    <if test="deptId!=null and deptId!=''">
      and bp.dept_id=#{deptId}
    </if>

    <if test="itemExecuters!=null ">
      and
      <foreach close=")" collection="itemExecuters" index="index" item="userId" open="( ">
        <trim suffixOverrides="or">
          <if test="userId!=null and userId != '' ">
            OR bi.Item_executer LIKE CONCAT('%,',#{userId},',%')
            OR bi.Item_executer LIKE CONCAT(#{userId},',%')
          </if>
        </trim>
      </foreach>
    </if>

    <if test="budgetItemNames!=null ">
      and bi.budget_item_name in
      <foreach close=")" collection="budgetItemNames" index="index" item="name" open="(" separator=",">
        <if test="name!=null and name != '' ">
          #{name}
        </if>
      </foreach>
    </if>

  </select>
  <!--预算执行台账列表查询-->
  <select id="selStatement1" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    bi.budget_id,
    bi.budget_item_name,
    bi.budget_item_no,
    bi.budget_item_begindate,
    bi.budget_item_enddate,
    bi.Input_time,
    bi.Line_No,
    bi.Prive_item,
    bi.Item_money,
    bi.Item_manager,
    bi.Item_executer,
    bi.Item_desc,
    bi.user_id,
    bi.user_phone,
    bi.STATUS,
    bi.quota_classify,
    bp.application_date,
    bp.actual_expenditure,
    bp.is_payment,
    bp.allow,
    bp.applicant,
    bp.dept_id,
    bp.run_id,
    bp.advance,
    fr.flow_id flowId,
    fr.run_name,
    bi.year,
    dept.dept_name
    FROM
    budget_item bi,
    budgeting_process bp,
    flow_run fr,
    department dept,
    `user` u
    WHERE
    bp.applicant = u.USER_ID
    AND bp.Budget_id = bi.Budget_id
    AND bi.dept_id = dept.dept_id
    AND fr.RUN_ID = bp.run_id
    <if test="budgetItem.deptId!=null and budgetItem.deptId!=''">
      and u.DEPT_ID = #{budgetItem.deptId}
    </if>
    <if test="budgetItem.budgetId!=null and budgetItem.budgetId!=''">
      and bi.budget_id = #{budgetItem.budgetId}
    </if>
    <if test="budgetItem.applicantBeginTime!=null and budgetItem.applicantBeginTime!=''">
      and bp.application_date &gt;= #{budgetItem.applicantBeginTime}
    </if>
    <if test="budgetItem.applicantEndTime!=null and budgetItem.applicantEndTime!=''">
      and bp.application_date &lt;= #{budgetItem.applicantEndTime}
    </if>
    <if test="budgetItem.itemExecuter!=null and budgetItem.itemExecuter!=''">
      and bi.Item_executer like CONCAT('%',#{budgetItem.itemExecuter},'%')
    </if>
    <if test="budgetItem.status!=null and budgetItem.status!=''">
      and bp.allow=#{budgetItem.status}
    </if>
    <if test="budgetItem.budgetItemNames!=null and budgetItem.budgetItemNames!=''">
      and bi.budget_id in
      <foreach close=")" collection="budgetItem.budgetItemNames" index="index" item="name" open="(" separator=",">
        <if test="name!=null and name != '' ">
          #{name}
        </if>
      </foreach>
    </if>
    ORDER BY fr.begin_time DESC ,bp.run_id DESC
  </select>

  <select id="getStatement" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    bi.budget_id,
    bi.budget_item_name,
    bi.budget_item_no,
    bi.budget_item_begindate,
    bi.budget_item_enddate,
    bi.Input_time,
    bi.Line_No,
    bi.Prive_item,
    bi.Item_money,
    bi.Item_manager,
    bi.Item_executer,
    bi.Item_desc,
    bi.user_id,
    bi.user_phone,
    bi.STATUS,
    bi.quota_classify,
    bp.application_date,
    bp.actual_expenditure,
    bp.is_payment,
    bp.allow,
    bp.applicant,
    bp.dept_id,
    bp.run_id,
    bp.advance,
    fr.flow_id flowId,
    fr.run_name,
    bi.year,
    dept.dept_name
    FROM
    budget_item bi,
    budgeting_process bp,
    flow_run fr,
    department dept,
    `user` u
    <where>
      <trim suffixOverrides="and">
        bp.applicant = u.USER_ID
        AND bp.Budget_id = bi.Budget_id
        AND bi.dept_id = dept.dept_id
        AND fr.RUN_ID = bp.run_id
        <if test="budgetItem.budgetId!=null and budgetItem.budgetId!=''">
          and bi.budget_id = #{budgetItem.budgetId}
        </if>
        <if test="budgetItem.applicantBeginTime!=null and budgetItem.applicantBeginTime!=''">
          and bp.application_date &gt;= #{budgetItem.applicantBeginTime}
        </if>
        <if test="budgetItem.applicantEndTime!=null and budgetItem.applicantEndTime!=''">
          and bp.application_date &lt;= #{budgetItem.applicantEndTime}
        </if>
        <if test="budgetItem.itemExecuter!=null and budgetItem.itemExecuter!=''">
          and bi.Item_executer like CONCAT('%',#{budgetItem.itemExecuter},'%')
        </if>
        <if test="budgetItem.status!=null and budgetItem.status!=''">
          and bp.allow=#{budgetItem.status}
        </if>
        <if test="budgetItem.budgetItemNames!=null and budgetItem.budgetItemNames!=''">
          and bi.budget_id in
          <foreach close=")" collection="budgetItem.budgetItemNames" index="index" item="name" open="(" separator=",">
            <if test="name!=null and name != '' ">
              #{name}
            </if>
          </foreach>
        </if>
        <if test="deptId != null">
          and bp.dept_id in
          <foreach collection="deptId" item="i" index="j" open="(" separator="," close=")">
            #{i}
          </foreach>
        </if>
        <if test="applicant != null">
          and bp.applicant in
          <foreach collection="applicant" item="m" index="n" open="(" separator="," close=")">
            #{m}
          </foreach>
        </if>
        <if test="budgetItem.year!=null and budgetItem.year!=''">
          and bi.year = #{budgetItem.year}
        </if>
      </trim>
    </where>
    ORDER BY fr.begin_time DESC ,bp.run_id DESC
  </select>

  <select id="selAllStatement" resultMap="ResultMapWithBLOBs">
        SELECT
    bi.budget_item_name,
    bi.budget_item_no,
    bi.budget_item_begindate,
    bi.budget_item_enddate,
    bi.Input_time,
    bi.Line_No,
    bi.Prive_item,
    bi.Item_money,
    bi.Item_manager,
    bi.Item_executer,
    bi.Item_desc,
    bi.user_id,
    bi.user_phone,
    bi.status,
    bi.quota_classify,
    bp.application_date,
    bp.actual_expenditure,
    bp.is_payment,bp.allow,
    bp.applicant,
    bp.dept_id,
    bp.run_id,
    bi.year
    FROM
    budget_item bi,
    budgeting_process bp
    WHERE
    bp.Budget_id = bi.Budget_id
  </select>

  <select id="selRunName" parameterType="java.lang.Integer" resultType="java.lang.String">
    SELECT run_name from flow_data_170 WHERE run_id=#{runId}
  </select>

  <select id="selOneLineNo" parameterType="java.lang.String" resultType="java.lang.String">
    select Line_No from budget_item where budget_item_name=#{budgetItem}
  </select>

  <update id="delAttachById1" parameterType="java.lang.Integer">
    update budget_item set Attachment_name=null,Attachment_id=null WHERE Budget_id=#{budgetId}
  </update>
  <update id="upItemMoney" parameterType="java.lang.Integer">
    update budget_item set Item_money=#{itemMoney} WHERE Budget_id=#{budgetId}
  </update>

  <select id="selByName" resultMap="ResultMapWithBLOBs">
    SELECT * from  budget_item WHERE budget_item_name = #{name}
  </select>

  <select id="selStatistics" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT IFNULL( round( sum( bp.advance ), 2 ), 0 ) advance,bi.budget_id,bi.budget_item_name,(bi.Item_money-IFNULL(round(sum(bp.actual_expenditure)+sum( bp.advance ),2),0)) isPayment,IFNULL(round(sum(bp.actual_expenditure),2),0) actualExpenditure,bi.Item_money,
    bi.dept_id,dept.dept_name

    from budgeting_process bp
    RIGHT JOIN budget_item bi ON bp.Budget_id = bi.Budget_id
    LEFT JOIN department dept ON dept.dept_id = bi.dept_id
    <where>
      bi.del_flag != 1
      <trim suffixOverrides="and">
        <if test="budgetItemBegindate!=null and budgetItemBegindate!=''">
          and bp.application_date &gt;= #{budgetItemBegindate}
        </if>
        <if test="budgetItemEnddate!=null and budgetItemEnddate!=''">
          and bp.application_date &lt;= #{budgetItemEnddate}
        </if>
        <if test="year!=null">
          AND bi.year = #{year}
        </if>
        <if test="deptId!=null and deptId!=''">
          and bi.dept_id = #{deptId}
        </if>
        <if test="itemExecuter!=null and itemExecuter!=''">
          AND  (bi.Item_executer like concat('%',#{itemExecuter},'%') OR
          bi.Item_executer like concat(#{itemExecuter},'%') OR
          bi.Item_executer like concat('%',#{itemExecuter}))
        </if>
        <if test="budgetIds!=null ">
          and bi.budget_id in
          <foreach close=")" collection="budgetIds" item="budgetId" open="(" separator=",">
            <if test="budgetId!=null and budgetId != '' ">
              #{budgetId}
            </if>
          </foreach>
        </if>
      </trim>
    </where>
    GROUP BY bi.Budget_id
  </select>

  <select id="getStatistics" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT IFNULL( round( sum( bp.advance ), 2 ), 0 ) advance,bi.budget_id,bi.budget_item_name,(bi.Item_money-IFNULL(round(sum(bp.actual_expenditure)+sum( bp.advance ),2),0)) isPayment,IFNULL(round(sum(bp.actual_expenditure),2),0) actualExpenditure,bi.Item_money,
    bi.dept_id,dept.dept_name
    from budgeting_process bp
    RIGHT JOIN budget_item bi ON bp.Budget_id = bi.Budget_id
    LEFT JOIN department dept ON dept.dept_id = bi.dept_id
    <where>
      bi.del_flag != 1
      <trim suffixOverrides="and">
        <if test="budgetItemBegindate!=null and budgetItemBegindate!=''">
          and bp.application_date &gt;= #{budgetItemBegindate}
        </if>
        <if test="budgetItemEnddate!=null and budgetItemEnddate!=''">
          and bp.application_date &lt;= #{budgetItemEnddate}
        </if>
        <if test="year!=null">
          AND bi.year = #{year}
        </if>
        <if test="itemExecuter!=null and itemExecuter!=''">
          AND  (bi.Item_executer like concat('%',#{itemExecuter},'%') OR
          bi.Item_executer like concat(#{itemExecuter},'%') OR
          bi.Item_executer like concat('%',#{itemExecuter}))
        </if>
        <if test="deptId != null">
          and bi.dept_id in
          <foreach collection="deptId" item="id" open="(" separator="," close=")">
            <if test="id != null and id != '' ">
              #{id}
            </if>
          </foreach>
        </if>
        <if test="budgetIds!=null ">
          and bi.budget_id in
          <foreach close=")" collection="budgetIds" item="budgetId" open="(" separator=",">
            <if test="budgetId!=null and budgetId != '' ">
              #{budgetId}
            </if>
          </foreach>
        </if>
      </trim>
    </where>
    GROUP BY bi.Budget_id
  </select>

  <select id="getStatistics" parameterType="map" resultMap="ResultMapWithBLOBs" databaseId="kingbase">
    SELECT IFNULL( round( sum( bp.advance ), 2 ), 0 ) advance,bi.budget_id,bi.budget_item_name,(bi.Item_money-IFNULL(round(sum(bp.actual_expenditure)+sum( bp.advance ),2),0)) isPayment,IFNULL(round(sum(bp.actual_expenditure),2),0) actualExpenditure,bi.Item_money,
    bi.dept_id,dept.dept_name
    from budgeting_process bp
    RIGHT JOIN budget_item bi ON bp.Budget_id = bi.Budget_id
    LEFT JOIN department dept ON dept.dept_id = bi.dept_id
    <where>
      bi.del_flag != 1
      <trim suffixOverrides="and">
        <if test="budgetItemBegindate!=null and budgetItemBegindate!=''">
          and bp.application_date &gt;= #{budgetItemBegindate}
        </if>
        <if test="budgetItemEnddate!=null and budgetItemEnddate!=''">
          and bp.application_date &lt;= #{budgetItemEnddate}
        </if>
        <if test="year!=null">
          AND bi.year = #{year}
        </if>
        <if test="itemExecuter!=null and itemExecuter!=''">
          AND  (bi.Item_executer like concat('%',#{itemExecuter},'%') OR
          bi.Item_executer like concat(#{itemExecuter},'%') OR
          bi.Item_executer like concat('%',#{itemExecuter}))
        </if>
        <if test="deptId != null">
          and bi.dept_id in
          <foreach collection="deptId" item="id" open="(" separator="," close=")">
            <if test="id != null and id != '' ">
              #{id}
            </if>
          </foreach>
        </if>
        <if test="budgetIds!=null ">
          and bi.budget_id in
          <foreach close=")" collection="budgetIds" item="budgetId" open="(" separator=",">
            <if test="budgetId!=null and budgetId != '' ">
              #{budgetId}
            </if>
          </foreach>
        </if>
      </trim>
    </where>
    GROUP BY bi.Budget_id,dept.dept_name
  </select>

  <select id="selLastBudgetNo" resultType="java.lang.String">
    SELECT  budget_item_no FROM budget_item ORDER BY Budget_id desc limit 1
  </select>

  <!--根据执行人的userId查他的deptId-->
  <select id="getDeptIdByUserId" parameterType="string" resultType="integer">
        select DEPT_ID
        from `user`
        where USER_ID = #{executor}
    </select>
  <select id="getDeptIdByUsername" parameterType="string" resultType="integer">
        select DEPT_ID
        from `user`
        where USER_NAME = #{executor}
    </select>
  <select id="getDeptNameByDeptId" parameterType="int" resultType="string">
        select DEPT_NAME
        from department
        where DEPT_ID = #{deptId}
    </select>

</mapper>