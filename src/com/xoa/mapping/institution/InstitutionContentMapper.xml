<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.institution.InstitutionContentMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.institution.InstitutionContent" >
    <id column="INST_ID" property="instId" jdbcType="INTEGER" />
    <result column="INST_TYPE" property="instType" jdbcType="VARCHAR" />
    <result column="INST_NO" property="instNo" jdbcType="INTEGER" />
    <result column="INST_NUMBER" property="instNumber" jdbcType="VARCHAR" />
    <result column="INST_NAME" property="instName" jdbcType="VARCHAR" />
    <result column="KEY_WORDS" property="keyWords" jdbcType="VARCHAR" />
    <result column="ATTACHMENT_ID" property="attachmentId" jdbcType="VARCHAR" />
    <result column="ATTACHMENT_NAME" property="attachmentName" jdbcType="VARCHAR" />
    <result column="OWNER_USER" property="ownerUser" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="EDIT_TIME" property="editTime" jdbcType="TIMESTAMP" />
    <result column="FILE_NUM" property="fileNum" jdbcType="INTEGER" />
    <result column="INST_STATUS" property="instStatus" jdbcType="CHAR" />
    <result column="VERSION" property="version" jdbcType="VARCHAR" />
    <result column="APPROVE_STATUS" property="approveStatus" jdbcType="CHAR" />
    <result column="APPROVAL_USER" property="approvalUser" jdbcType="VARCHAR" />
    <result column="READER_NUM" property="readerNum" jdbcType="INTEGER" />
    <result column="BELONGTO_UNIT" property="belongtoUnit" jdbcType="VARCHAR" />
    <result column="BELONGTO_DEPTS" property="belongtoDepts" jdbcType="LONGVARCHAR" />
    <result column="INST_NUMBER_OUT" property="instNumberOut" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xoa.model.institution.InstitutionContentWithBLOBs" extends="BaseResultMap" >
    <result column="INST_CONTENT" property="instContent" jdbcType="LONGVARCHAR" />
    <result column="READER_USERS" property="readerUsers" jdbcType="LONGVARCHAR" />
    <result column="EDIT_CONTENT" property="editContent" jdbcType="LONGVARCHAR" />
    <result column="HTML_URL" property="htmlUrl" jdbcType="VARCHAR" />
    <result column="FLOW_ID" property="flowId" jdbcType="LONGVARCHAR" />
    <result column="USER_IDS" property="userIds" jdbcType="LONGVARCHAR" />
    <result column="VIEW_DEPTS" jdbcType="LONGVARCHAR" property="viewDepts" />
    <result column="VIEW_PRIVS" jdbcType="LONGVARCHAR" property="viewPrivs" />
    <result column="VIEW_USERS" jdbcType="LONGVARCHAR" property="viewUsers" />
    <result column="VIEW_USER_TYPE" jdbcType="LONGVARCHAR" property="viewUserType" />
    <result column="SORT_ID" property="sortId" jdbcType="INTEGER" />
    <association property="institutionSort" javaType="com.xoa.model.institution.InstitutionSortWithBLOBs">
      <id column="SORT_ID" property="sortId" jdbcType="INTEGER" />
      <result column="SORT_NO" property="sortNo" jdbcType="INTEGER" />
      <result column="SORT_NAME" property="sortName" jdbcType="VARCHAR" />
      <result column="SORT_PARENT" property="sortParent" jdbcType="INTEGER" />
      <result column="VIEW_USER_TYPE" property="viewUserType" jdbcType="VARCHAR" />
      <result column="VIEW_SCOPE" property="viewScope" jdbcType="VARCHAR" />
      <result column="SORT_DESC" property="sortDesc" jdbcType="LONGVARCHAR" />
      <result column="BELONGTO_DEPTS" property="belongtoDepts" jdbcType="LONGVARCHAR" />
      <result column="VIEW_DEPTS" property="viewDepts" jdbcType="LONGVARCHAR" />
      <result column="VIEW_PRIVS" property="viewPrivs" jdbcType="LONGVARCHAR" />
      <result column="VIEW_USERS" property="viewUsers" jdbcType="LONGVARCHAR" />
    </association>
  </resultMap>

  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    c.INST_ID, c.SORT_ID, c.INST_TYPE, c.INST_NO, c.INST_NUMBER, c.INST_NAME, c.KEY_WORDS, c.ATTACHMENT_ID,
    c.ATTACHMENT_NAME, c.FILE_NUM, c.INST_STATUS, c.VERSION, c.APPROVE_STATUS, c.APPROVAL_USER, c.READER_NUM,
    c.OWNER_USER, c.EDIT_TIME, c.CREATE_TIME, c.HTML_URL, c.BELONGTO_DEPTS, c.BELONGTO_UNIT,c.INST_NUMBER_OUT
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    c.INST_CONTENT, c.READER_USERS, c.EDIT_CONTENT, c.FLOW_ID, c.USER_IDS, c.VIEW_DEPTS, c.VIEW_PRIVS,
    c.VIEW_USERS, c.VIEW_USER_TYPE
  </sql>

  <!--制度分类-->
  <sql id="Base_Column_List_Sort" >
    s.SORT_ID, s.SORT_NO, s.SORT_NAME, s.SORT_PARENT
  </sql>
  <sql id="Blob_Column_List_Sort" >
    s.SORT_DESC, s.BELONGTO_DEPTS, s.VIEW_DEPTS, s.VIEW_PRIVS, s.VIEW_USERS
  </sql>

  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.xoa.model.institution.InstitutionContentExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from institution_content
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xoa.model.institution.InstitutionContentExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from institution_content
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from institution_content as c
    where c.INST_ID = #{instId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from institution_content
    where INST_ID = #{instId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xoa.model.institution.InstitutionContentExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from institution_content
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into institution_content (INST_ID, SORT_ID, INST_TYPE,
    INST_NO, INST_NUMBER, INST_NAME,
    KEY_WORDS, ATTACHMENT_ID, ATTACHMENT_NAME,
    FILE_NUM, INST_STATUS, VERSION,
    APPROVE_STATUS, APPROVAL_USER, READER_NUM,
    OWNER_USER, EDIT_TIME, CREATE_TIME,
    HTML_URL, BELONGTO_DEPTS, BELONGTO_UNIT,
    INST_CONTENT, READER_USERS, EDIT_CONTENT,
    FLOW_ID, USER_IDS, VIEW_DEPTS,
    VIEW_PRIVS, VIEW_USERS, VIEW_USER_TYPE
    )
    values (#{instId,jdbcType=INTEGER}, #{sortId,jdbcType=INTEGER}, #{instType,jdbcType=VARCHAR},
    #{instNo,jdbcType=INTEGER}, #{instNumber,jdbcType=VARCHAR}, #{instName,jdbcType=VARCHAR},
    #{keyWords,jdbcType=VARCHAR}, #{attachmentId,jdbcType=VARCHAR}, #{attachmentName,jdbcType=VARCHAR},
    #{fileNum,jdbcType=INTEGER}, #{instStatus,jdbcType=CHAR}, #{version,jdbcType=VARCHAR},
    #{approveStatus,jdbcType=CHAR}, #{approvalUser,jdbcType=VARCHAR}, #{readerNum,jdbcType=INTEGER},
    #{ownerUser,jdbcType=VARCHAR}, #{editTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP},
    #{htmlUrl,jdbcType=VARCHAR}, #{belongtoDepts,jdbcType=VARCHAR}, #{belongtoUnit,jdbcType=VARCHAR},
    #{instContent,jdbcType=LONGVARCHAR}, #{readerUsers,jdbcType=LONGVARCHAR}, #{editContent,jdbcType=LONGVARCHAR},
    #{flowId,jdbcType=LONGVARCHAR}, #{userIds,jdbcType=LONGVARCHAR}, #{viewDepts,jdbcType=LONGVARCHAR},
    #{viewPrivs,jdbcType=LONGVARCHAR}, #{viewUsers,jdbcType=LONGVARCHAR}, #{viewUserType,jdbcType=LONGVARCHAR}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs"  useGeneratedKeys="true" keyColumn="INST_ID" keyProperty="instId">
    <selectKey order="AFTER" keyProperty="instId" resultType="int">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into institution_content
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="instId != null" >
        INST_ID,
      </if>
      <if test="sortId != null" >
        SORT_ID,
      </if>
      <if test="instType != null" >
        INST_TYPE,
      </if>
      <if test="instNo != null" >
        INST_NO,
      </if>
      <if test="instNumber != null" >
        INST_NUMBER,
      </if>
      <if test="instName != null" >
        INST_NAME,
      </if>
      <if test="instNumberOut != null">
        INST_NUMBER_OUT,
      </if>
      <if test="keyWords != null" >
        KEY_WORDS,
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID,
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME,
      </if>
      <if test="fileNum != null" >
        FILE_NUM,
      </if>
      <if test="instStatus != null" >
        INST_STATUS,
      </if>
      <if test="version != null" >
        VERSION,
      </if>
      <if test="approveStatus != null" >
        APPROVE_STATUS,
      </if>
      <if test="approvalUser != null" >
        APPROVAL_USER,
      </if>
      <if test="readerNum != null" >
        READER_NUM,
      </if>
      <if test="ownerUser != null" >
        OWNER_USER,
      </if>
      <if test="editTime != null" >
        EDIT_TIME,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="htmlUrl != null" >
        HTML_URL,
      </if>
      <if test="belongtoDepts != null" >
        BELONGTO_DEPTS,
      </if>
      <if test="belongtoUnit != null" >
        BELONGTO_UNIT,
      </if>
      <if test="instContent != null" >
        INST_CONTENT,
      </if>
      <if test="readerUsers != null" >
        READER_USERS,
      </if>
      <if test="editContent != null" >
        EDIT_CONTENT,
      </if>
      <if test="flowId != null" >
        FLOW_ID,
      </if>
      <if test="userIds != null" >
        USER_IDS,
      </if>
      <if test="viewDepts != null" >
        VIEW_DEPTS,
      </if>
      <if test="viewPrivs != null" >
        VIEW_PRIVS,
      </if>
      <if test="viewUsers != null" >
        VIEW_USERS,
      </if>
      <if test="viewUserType != null" >
        VIEW_USER_TYPE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="instId != null" >
        #{instId,jdbcType=INTEGER},
      </if>
      <if test="sortId != null" >
        #{sortId,jdbcType=INTEGER},
      </if>
      <if test="instType != null" >
        #{instType,jdbcType=VARCHAR},
      </if>
      <if test="instNo != null" >
        #{instNo,jdbcType=INTEGER},
      </if>
      <if test="instNumber != null" >
        #{instNumber,jdbcType=VARCHAR},
      </if>
      <if test="instName != null" >
        #{instName,jdbcType=VARCHAR},
      </if>
      <if test="instNumberOut != null">
        #{instNumberOut,jdbcType=VARCHAR},
      </if>
      <if test="keyWords != null" >
        #{keyWords,jdbcType=VARCHAR},
      </if>
      <if test="attachmentId != null" >
        #{attachmentId,jdbcType=VARCHAR},
      </if>
      <if test="attachmentName != null" >
        #{attachmentName,jdbcType=VARCHAR},
      </if>
      <if test="fileNum != null" >
        #{fileNum,jdbcType=INTEGER},
      </if>
      <if test="instStatus != null" >
        #{instStatus,jdbcType=CHAR},
      </if>
      <if test="version != null" >
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="approveStatus != null" >
        #{approveStatus,jdbcType=CHAR},
      </if>
      <if test="approvalUser != null" >
        #{approvalUser,jdbcType=VARCHAR},
      </if>
      <if test="readerNum != null" >
        #{readerNum,jdbcType=INTEGER},
      </if>
      <if test="ownerUser != null" >
        #{ownerUser,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null" >
        #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="htmlUrl != null" >
        #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="belongtoDepts != null" >
        #{belongtoDepts,jdbcType=VARCHAR},
      </if>
      <if test="belongtoUnit != null" >
        #{belongtoUnit,jdbcType=VARCHAR},
      </if>
      <if test="instContent != null" >
        #{instContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="readerUsers != null" >
        #{readerUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="editContent != null" >
        #{editContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="flowId != null" >
        #{flowId,jdbcType=LONGVARCHAR},
      </if>
      <if test="userIds != null" >
        #{userIds,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewDepts != null" >
        #{viewDepts,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewPrivs != null" >
        #{viewPrivs,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewUsers != null" >
        #{viewUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewUserType != null" >
        #{viewUserType,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xoa.model.institution.InstitutionContentExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from institution_content
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    <set >
      <if test="record.instId != null" >
        INST_ID = #{record.instId,jdbcType=INTEGER},
      </if>
      <if test="record.sortId != null" >
        SORT_ID = #{record.sortId,jdbcType=INTEGER},
      </if>
      <if test="record.instType != null" >
        INST_TYPE = #{record.instType,jdbcType=VARCHAR},
      </if>
      <if test="record.instNo != null" >
        INST_NO = #{record.instNo,jdbcType=INTEGER},
      </if>
      <if test="record.instNumber != null" >
        INST_NUMBER = #{record.instNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.instName != null" >
        INST_NAME = #{record.instName,jdbcType=VARCHAR},
      </if>
      <if test="record.keyWords != null" >
        KEY_WORDS = #{record.keyWords,jdbcType=VARCHAR},
      </if>
      <if test="record.attachmentId != null" >
        ATTACHMENT_ID = #{record.attachmentId,jdbcType=VARCHAR},
      </if>
      <if test="record.attachmentName != null" >
        ATTACHMENT_NAME = #{record.attachmentName,jdbcType=VARCHAR},
      </if>
      <if test="record.fileNum != null" >
        FILE_NUM = #{record.fileNum,jdbcType=INTEGER},
      </if>
      <if test="record.instStatus != null" >
        INST_STATUS = #{record.instStatus,jdbcType=CHAR},
      </if>
      <if test="record.version != null" >
        VERSION = #{record.version,jdbcType=VARCHAR},
      </if>
      <if test="record.approveStatus != null" >
        APPROVE_STATUS = #{record.approveStatus,jdbcType=CHAR},
      </if>
      <if test="record.approvalUser != null" >
        APPROVAL_USER = #{record.approvalUser,jdbcType=VARCHAR},
      </if>
      <if test="record.readerNum != null" >
        READER_NUM = #{record.readerNum,jdbcType=INTEGER},
      </if>
      <if test="record.ownerUser != null" >
        OWNER_USER = #{record.ownerUser,jdbcType=VARCHAR},
      </if>
      <if test="record.editTime != null" >
        EDIT_TIME = #{record.editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.htmlUrl != null" >
        HTML_URL = #{record.htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.belongtoDepts != null" >
        BELONGTO_DEPTS = #{record.belongtoDepts,jdbcType=VARCHAR},
      </if>
      <if test="record.belongtoUnit != null" >
        BELONGTO_UNIT = #{record.belongtoUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.instContent != null" >
        INST_CONTENT = #{record.instContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.readerUsers != null" >
        READER_USERS = #{record.readerUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.editContent != null" >
        EDIT_CONTENT = #{record.editContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.flowId != null" >
        FLOW_ID = #{record.flowId,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.userIds != null" >
        USER_IDS = #{record.userIds,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.viewDepts != null" >
        VIEW_DEPTS = #{record.viewDepts,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.viewPrivs != null" >
        VIEW_PRIVS = #{record.viewPrivs,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.viewUsers != null" >
        VIEW_USERS = #{record.viewUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.viewUserType != null" >
        VIEW_USER_TYPE = #{record.viewUserType,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    set INST_ID = #{record.instId,jdbcType=INTEGER},
    SORT_ID = #{record.sortId,jdbcType=INTEGER},
    INST_TYPE = #{record.instType,jdbcType=VARCHAR},
    INST_NO = #{record.instNo,jdbcType=INTEGER},
    INST_NUMBER = #{record.instNumber,jdbcType=VARCHAR},
    INST_NAME = #{record.instName,jdbcType=VARCHAR},
    KEY_WORDS = #{record.keyWords,jdbcType=VARCHAR},
    ATTACHMENT_ID = #{record.attachmentId,jdbcType=VARCHAR},
    ATTACHMENT_NAME = #{record.attachmentName,jdbcType=VARCHAR},
    FILE_NUM = #{record.fileNum,jdbcType=INTEGER},
    INST_STATUS = #{record.instStatus,jdbcType=CHAR},
    VERSION = #{record.version,jdbcType=VARCHAR},
    APPROVE_STATUS = #{record.approveStatus,jdbcType=CHAR},
    APPROVAL_USER = #{record.approvalUser,jdbcType=VARCHAR},
    READER_NUM = #{record.readerNum,jdbcType=INTEGER},
    OWNER_USER = #{record.ownerUser,jdbcType=VARCHAR},
    EDIT_TIME = #{record.editTime,jdbcType=TIMESTAMP},
    CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
    HTML_URL = #{record.htmlUrl,jdbcType=VARCHAR},
    BELONGTO_DEPTS = #{record.belongtoDepts,jdbcType=VARCHAR},
    BELONGTO_UNIT = #{record.belongtoUnit,jdbcType=VARCHAR},
    INST_CONTENT = #{record.instContent,jdbcType=LONGVARCHAR},
    READER_USERS = #{record.readerUsers,jdbcType=LONGVARCHAR},
    EDIT_CONTENT = #{record.editContent,jdbcType=LONGVARCHAR},
    FLOW_ID = #{record.flowId,jdbcType=LONGVARCHAR},
    USER_IDS = #{record.userIds,jdbcType=LONGVARCHAR},
    VIEW_DEPTS = #{record.viewDepts,jdbcType=LONGVARCHAR},
    VIEW_PRIVS = #{record.viewPrivs,jdbcType=LONGVARCHAR},
    VIEW_USERS = #{record.viewUsers,jdbcType=LONGVARCHAR},
    VIEW_USER_TYPE = #{record.viewUserType,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    set INST_ID = #{record.instId,jdbcType=INTEGER},
    SORT_ID = #{record.sortId,jdbcType=INTEGER},
    INST_TYPE = #{record.instType,jdbcType=VARCHAR},
    INST_NO = #{record.instNo,jdbcType=INTEGER},
    INST_NUMBER = #{record.instNumber,jdbcType=VARCHAR},
    INST_NAME = #{record.instName,jdbcType=VARCHAR},
    KEY_WORDS = #{record.keyWords,jdbcType=VARCHAR},
    ATTACHMENT_ID = #{record.attachmentId,jdbcType=VARCHAR},
    ATTACHMENT_NAME = #{record.attachmentName,jdbcType=VARCHAR},
    FILE_NUM = #{record.fileNum,jdbcType=INTEGER},
    INST_STATUS = #{record.instStatus,jdbcType=CHAR},
    VERSION = #{record.version,jdbcType=VARCHAR},
    APPROVE_STATUS = #{record.approveStatus,jdbcType=CHAR},
    APPROVAL_USER = #{record.approvalUser,jdbcType=VARCHAR},
    READER_NUM = #{record.readerNum,jdbcType=INTEGER},
    OWNER_USER = #{record.ownerUser,jdbcType=VARCHAR},
    EDIT_TIME = #{record.editTime,jdbcType=TIMESTAMP},
    CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
    HTML_URL = #{record.htmlUrl,jdbcType=VARCHAR},
    BELONGTO_DEPTS = #{record.belongtoDepts,jdbcType=VARCHAR},
    BELONGTO_UNIT = #{record.belongtoUnit,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    <set >
      <if test="sortId != null" >
        SORT_ID = #{sortId,jdbcType=INTEGER},
      </if>
      <if test="instType != null" >
        INST_TYPE = #{instType,jdbcType=VARCHAR},
      </if>
      <if test="instNo != null" >
        INST_NO = #{instNo,jdbcType=INTEGER},
      </if>
      <if test="instNumber != null" >
        INST_NUMBER = #{instNumber,jdbcType=VARCHAR},
      </if>
      <if test="instName != null" >
        INST_NAME = #{instName,jdbcType=VARCHAR},
      </if>
      <if test="keyWords != null" >
        KEY_WORDS = #{keyWords,jdbcType=VARCHAR},
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID = #{attachmentId,jdbcType=VARCHAR},
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME = #{attachmentName,jdbcType=VARCHAR},
      </if>
      <if test="fileNum != null" >
        FILE_NUM = #{fileNum,jdbcType=INTEGER},
      </if>
      <if test="instStatus != null" >
        INST_STATUS = #{instStatus,jdbcType=CHAR},
      </if>
      <if test="version != null" >
        VERSION = #{version,jdbcType=VARCHAR},
      </if>
      <if test="approveStatus != null" >
        APPROVE_STATUS = #{approveStatus,jdbcType=CHAR},
      </if>
      <if test="approvalUser != null" >
        APPROVAL_USER = #{approvalUser,jdbcType=VARCHAR},
      </if>
      <if test="readerNum != null" >
        READER_NUM = #{readerNum,jdbcType=INTEGER},
      </if>
      <if test="ownerUser != null" >
        OWNER_USER = #{ownerUser,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null" >
        EDIT_TIME = #{editTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="htmlUrl != null" >
        HTML_URL = #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="belongtoDepts != null" >
        BELONGTO_DEPTS = #{belongtoDepts,jdbcType=VARCHAR},
      </if>
      <if test="belongtoUnit != null" >
        BELONGTO_UNIT = #{belongtoUnit,jdbcType=VARCHAR},
      </if>
      <if test="instContent != null" >
        INST_CONTENT = #{instContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="readerUsers != null" >
        READER_USERS = #{readerUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="editContent != null" >
        EDIT_CONTENT = #{editContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="flowId != null" >
        FLOW_ID = #{flowId,jdbcType=LONGVARCHAR},
      </if>
      <if test="userIds != null" >
        USER_IDS = #{userIds,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewDepts != null" >
        VIEW_DEPTS = #{viewDepts,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewPrivs != null" >
        VIEW_PRIVS = #{viewPrivs,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewUsers != null" >
        VIEW_USERS = #{viewUsers,jdbcType=LONGVARCHAR},
      </if>
      <if test="viewUserType != null" >
        VIEW_USER_TYPE = #{viewUserType,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    set SORT_ID = #{sortId,jdbcType=INTEGER},
    INST_TYPE = #{instType,jdbcType=VARCHAR},
    INST_NO = #{instNo,jdbcType=INTEGER},
    INST_NUMBER = #{instNumber,jdbcType=VARCHAR},
    INST_NAME = #{instName,jdbcType=VARCHAR},
    KEY_WORDS = #{keyWords,jdbcType=VARCHAR},
    ATTACHMENT_ID = #{attachmentId,jdbcType=VARCHAR},
    ATTACHMENT_NAME = #{attachmentName,jdbcType=VARCHAR},
    FILE_NUM = #{fileNum,jdbcType=INTEGER},
    INST_STATUS = #{instStatus,jdbcType=CHAR},
    VERSION = #{version,jdbcType=VARCHAR},
    APPROVE_STATUS = #{approveStatus,jdbcType=CHAR},
    APPROVAL_USER = #{approvalUser,jdbcType=VARCHAR},
    READER_NUM = #{readerNum,jdbcType=INTEGER},
    OWNER_USER = #{ownerUser,jdbcType=VARCHAR},
    EDIT_TIME = #{editTime,jdbcType=TIMESTAMP},
    CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
    HTML_URL = #{htmlUrl,jdbcType=VARCHAR},
    BELONGTO_DEPTS = #{belongtoDepts,jdbcType=VARCHAR},
    BELONGTO_UNIT = #{belongtoUnit,jdbcType=VARCHAR},
    INST_CONTENT = #{instContent,jdbcType=LONGVARCHAR},
    READER_USERS = #{readerUsers,jdbcType=LONGVARCHAR},
    EDIT_CONTENT = #{editContent,jdbcType=LONGVARCHAR},
    FLOW_ID = #{flowId,jdbcType=LONGVARCHAR},
    USER_IDS = #{userIds,jdbcType=LONGVARCHAR},
    VIEW_DEPTS = #{viewDepts,jdbcType=LONGVARCHAR},
    VIEW_PRIVS = #{viewPrivs,jdbcType=LONGVARCHAR},
    VIEW_USERS = #{viewUsers,jdbcType=LONGVARCHAR},
    VIEW_USER_TYPE = #{viewUserType,jdbcType=LONGVARCHAR}
    where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.institution.InstitutionContent" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update institution_content
    set SORT_ID = #{sortId,jdbcType=INTEGER},
    INST_TYPE = #{instType,jdbcType=VARCHAR},
    INST_NO = #{instNo,jdbcType=INTEGER},
    INST_NUMBER = #{instNumber,jdbcType=VARCHAR},
    INST_NAME = #{instName,jdbcType=VARCHAR},
    KEY_WORDS = #{keyWords,jdbcType=VARCHAR},
    ATTACHMENT_ID = #{attachmentId,jdbcType=VARCHAR},
    ATTACHMENT_NAME = #{attachmentName,jdbcType=VARCHAR},
    FILE_NUM = #{fileNum,jdbcType=INTEGER},
    INST_STATUS = #{instStatus,jdbcType=CHAR},
    VERSION = #{version,jdbcType=VARCHAR},
    APPROVE_STATUS = #{approveStatus,jdbcType=CHAR},
    APPROVAL_USER = #{approvalUser,jdbcType=VARCHAR},
    READER_NUM = #{readerNum,jdbcType=INTEGER},
    OWNER_USER = #{ownerUser,jdbcType=VARCHAR},
    EDIT_TIME = #{editTime,jdbcType=TIMESTAMP},
    CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
    HTML_URL = #{htmlUrl,jdbcType=VARCHAR},
    BELONGTO_DEPTS = #{belongtoDepts,jdbcType=VARCHAR},
    BELONGTO_UNIT = #{belongtoUnit,jdbcType=VARCHAR}
    where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <select id="findBySortIdCount" resultType="int" parameterType="int">
    select
    count(*)
    FROM `institution_content`
    <where>
      <if test="sortId!=null">
        SORT_ID=#{sortId}
      </if>
    </where>
  </select>

  <select id="findContentWhere" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    c.*
    FROM ( SELECT * FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS a GROUP BY a.INST_NUMBER ) AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="belongtoDepts!=null and viewDepts!=null  and viewPrivs!=null and viewUsers!=null ">
        and (
        s.BELONGTO_DEPTS like CONCAT('%',#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS = 'ALL_DEPT'

        or s.VIEW_DEPTS like CONCAT('%',#{viewDepts},',%')
        or s.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or s.VIEW_DEPTS = 'ALL_DEPT'

        or s.VIEW_PRIVS like CONCAT('%',#{viewPrivs},',%')
        or s.VIEW_USERS like CONCAT('%',#{viewUsers},',%')
        )
      </if>

      <if test="approvalUser!=null and approvalUser!=''">
        and (
        c.APPROVAL_USER like CONCAT(#{approvalUser},',%')
        or c.APPROVAL_USER = #{approvalUser}
        )
      </if>

      <if test="sortId!=null and sortId!=''">
        and c.SORT_ID = #{sortId}
        and c.INST_STATUS = '1'
      </if>

      <if test="approveStatus!=null and approveStatus!=''">
        and c.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and c.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and c.INST_TYPE = #{instType}
      </if>

      <if test="instName!=null and instName!='' and keyWords!=null and keyWords!='' ">
        and ( c.INST_NAME like CONCAT('%',#{instName},'%')
        or c.KEY_WORDS like CONCAT('%',#{keyWords},'%')
        )
      </if>

      <if test="flowId != null">
        and ( c.FLOW_ID ${flowId})
      </if>

      <if test="userIds != null and userIds != '' ">
        and (
        c.USER_IDS like CONCAT('%',#{userIds},',%')
        or c.USER_IDS like CONCAT(#{userIds},',%')
        )
      </if>

      <if test="instId != null and instId != '' ">
        and INST_ID = #{instId}
      </if>

    </where>
    <if test="orders != null and orders==1">
      order by c.INST_NO
    </if>
    <if test="orders != null and orders==2">
      order by c.READER_NUM+0 desc
    </if>
    <if test="orders != null and orders==3">
      order by c.CREATE_TIME
    </if>
  </select>

  <select id="findContentHistory" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    ,
    <include refid="Base_Column_List_Sort" />
    ,
    <include refid="Blob_Column_List_Sort" />
    FROM `institution_content` AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="instNumber!=null and instNumber!=''">
        c.INST_NUMBER=#{instNumber}
      </if>
    </where>
    order by c.CREATE_TIME DESC
  </select>

  <select id="findContenUser" resultType="java.lang.String" parameterType="string">
    SELECT
    GROUP_CONCAT(USER_ID) AS userIds
    FROM
    `user`
    <where>
      NOT_LOGIN = '0'
      <if test="belongtoDepts!=null or viewDepts!=null or viewPrivs!=null or viewUsers!=null ">
        and
        <trim prefix="(" suffix=")" prefixOverrides="or">
          <if test="belongtoDepts!=null and belongtoDepts!=''">
            or DEPT_ID in (${belongtoDepts})
          </if>
          <if test="viewDepts!=null and viewDepts!=''">
            or DEPT_ID in (${viewDepts})
          </if>
          <if test="viewPrivs!=null and viewPrivs!=''">
            or USER_PRIV in (${viewPrivs})
          </if>
          <if test="viewUsers!=null and viewUsers!=''">
            or USER_ID in (${viewUsers})
          </if>
        </trim>
      </if>
    </where>
  </select>

  <select id="isVersion" resultType="java.lang.Integer" parameterType="string">
      SELECT
          COUNT( INST_ID )
      FROM
          `institution_content`
      WHERE
          INST_NUMBER = #{instNumber}
          AND VERSION = #{version}
    </select>

  <select id="findContenHTMLORFILEURL" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    ,
    <include refid="Base_Column_List_Sort" />
    ,
    <include refid="Blob_Column_List_Sort" />
    FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="belongtoDepts!=null and viewDepts!=null  and viewPrivs!=null and viewUsers!=null ">
        and (
        s.BELONGTO_DEPTS like CONCAT('%',#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS = 'ALL_DEPT'

        or s.VIEW_DEPTS like CONCAT('%',#{viewDepts},',%')
        or s.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or s.VIEW_DEPTS = 'ALL_DEPT'

        or s.VIEW_PRIVS like CONCAT('%',#{viewPrivs},',%')

        or s.VIEW_USERS like CONCAT('%',#{viewUsers},',%')
        )
      </if>
      <if test="instType!=null and instType!=''">
        and c.INST_TYPE=#{instType}
      </if>
      <if test="sortId!=null and sortId!=''">
        and c.SORT_ID=#{sortId}
      </if>
      <if test="instName!=null and instName!=''">
        and c.INST_NAME Like concat('%',#{instName},'%')
      </if>
    </where>
  </select>

  <select id="findContentIds" resultMap="ResultMapWithBLOBs" parameterType="string">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    ,
    <include refid="Base_Column_List_Sort" />
    ,
    <include refid="Blob_Column_List_Sort" />
    FROM `institution_content` AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    where c.INST_ID in (${ids})
  </select>

  <select id="getAttachmentIds" resultType="java.util.Map" parameterType="String">
    SELECT
    GROUP_CONCAT(ATTACH_ID) as ATTACH_IDS,
    GROUP_CONCAT(ATTACH_NAME) as ATTACH_NAMES
    FROM
    `attachment`
    <where>
      <if test="attachmentIds!=null and attachmentIds!='' ">
        and ATTACH_ID IN ( ${attachmentIds} )
      </if>
      <if test="instName!=null and instName!='' ">
        AND ATTACH_NAME LIKE CONCAT( '%', #{instName},'%')
      </if>
    </where>

  </select>

  <select id="countConten" resultType="java.lang.Integer" parameterType="map">
    SELECT
    COUNT(c.INST_ID) as num
    FROM
    ( SELECT * FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS a GROUP BY a.INST_NUMBER ) AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="approveStatus!=null and approveStatus!=''">
        and c.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and c.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and c.INST_TYPE = #{instType}
      </if>
    </where>
    ORDER BY
    c.INST_NO,c.READER_NUM
  </select>

  <select id="findContenFlowRun" resultType="java.lang.String" parameterType="map">
    select
    GROUP_CONCAT(c.FLOW_ID)
    FROM ( SELECT * FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS a GROUP BY a.INST_NUMBER ) AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="belongtoDepts!=null and viewDepts!=null  and viewPrivs!=null and viewUsers!=null ">
        and (
        s.BELONGTO_DEPTS like CONCAT('%',#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS = 'ALL_DEPT'

        or s.VIEW_DEPTS like CONCAT('%',#{viewDepts},',%')
        or s.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or s.VIEW_DEPTS = 'ALL_DEPT'

        or s.VIEW_PRIVS like CONCAT('%',#{viewPrivs},',%')
        or s.VIEW_USERS like CONCAT('%',#{viewUsers},',%')
        )
      </if>

      <if test="approveStatus!=null and approveStatus!=''">
        and c.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and c.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and c.INST_TYPE = #{instType}
      </if>

      <if test="flowId != null">
        and ( c.FLOW_ID ${flowId})
      </if>
    </where>
  </select>

  <select id="findRecentConten" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    ,
    <include refid="Base_Column_List_Sort" />
    ,
    <include refid="Blob_Column_List_Sort" />
    FROM
    ( SELECT * FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS a GROUP BY a.INST_NUMBER ) AS c
    LEFT JOIN `institution_sort` AS s ON c.SORT_ID = s.SORT_ID
    WHERE
    c.INST_STATUS = 1
    AND c.APPROVE_STATUS = 1
    AND ( c.READER_USERS LIKE CONCAT( '%', #{userId}, ',%' ) OR c.READER_USERS LIKE CONCAT( #{userId}, ',%' ) )
    ORDER BY INST_ID DESC
    LIMIT 10;
  </select>

  <select id="getContenFlowRun" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    ic.*
    FROM `institution_content`  AS ic
    <where>
      <if test=" viewDepts!=null  and viewPrivs!=null and viewUsers!=null and viewUserType != null and belongtoDepts!=null ">
        and (
        ic.VIEW_DEPTS like CONCAT('%',#{viewDepts},',%')
        or ic.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or ic.VIEW_DEPTS = 'ALL_DEPT'

        or ic.VIEW_PRIVS like CONCAT('%',#{viewPrivs},',%')

        or ic.VIEW_USERS like CONCAT('%',#{viewUsers},',%')

        or ic.VIEW_USER_TYPE like CONCAT('%',#{viewUserType},',%')
        or ic.VIEW_USER_TYPE like CONCAT(#{viewUserType},',%')

        or ic.BELONGTO_DEPTS like CONCAT('%',#{belongtoDepts},',%')
        or ic.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or ic.BELONGTO_DEPTS = 'ALL_DEPT'
        )
      </if>

      <if test="approveStatus!=null and approveStatus!=''">
        and ic.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and ic.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and ic.INST_TYPE = #{instType}
      </if>

      <if test="flowId != null">
        and (
        ic.FLOW_ID like CONCAT('%',#{flowId},',%')
        or ic.FLOW_ID like CONCAT(#{flowId},',%')
        )
      </if>
    </where>
    GROUP BY ic.INST_NUMBER
    ORDER BY CREATE_TIME DESC
  </select>

  <select id="getContenFlowRun" resultMap="ResultMapWithBLOBs" parameterType="map" databaseId="dm">
    select
    c.*
    FROM ( SELECT * FROM institution_content AS a  where INST_NUMBER in ( SELECT INST_NUMBER FROM "institution_content" GROUP BY INST_NUMBER  ) ORDER BY a.CREATE_TIME DESC  ) AS c
    LEFT JOIN "institution_sort" AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="belongtoDepts!=null and viewDepts!=null  and viewPrivs!=null and viewUsers!=null ">
        and (
        s.BELONGTO_DEPTS like CONCAT(CONCAT('%',#{belongtoDepts}),',%')
        or s.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS = 'ALL_DEPT'

        or s.VIEW_DEPTS like CONCAT(CONCAT('%',#{viewDepts}),',%')
        or s.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or s.VIEW_DEPTS = 'ALL_DEPT'

        or s.VIEW_PRIVS like CONCAT(CONCAT('%',#{viewPrivs}),',%')
        or s.VIEW_USERS like CONCAT(CONCAT('%',#{viewUsers}),',%')
        )
      </if>

      <if test="approveStatus!=null and approveStatus!=''">
        and c.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and c.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and c.INST_TYPE = #{instType}
      </if>

      <if test="flowId != null">
        and (
        c.FLOW_ID like CONCAT(CONCAT('%',#{flowId}),',%')
        or c.FLOW_ID like CONCAT(#{flowId},',%')
        )
      </if>
    </where>
  </select>

  <select id="getContenFlowRun" resultMap="ResultMapWithBLOBs" parameterType="map" databaseId="kingbase">
    select
    c.*
    FROM ( SELECT * FROM institution_content AS a  where INST_NUMBER in ( SELECT INST_NUMBER FROM "institution_content" GROUP BY INST_NUMBER  ) ORDER BY a.CREATE_TIME DESC  ) AS c
    LEFT JOIN "institution_sort" AS s ON c.SORT_ID = s.SORT_ID
    <where>
      <if test="belongtoDepts!=null and viewDepts!=null  and viewPrivs!=null and viewUsers!=null ">
        and (
        s.BELONGTO_DEPTS like CONCAT(CONCAT('%',#{belongtoDepts}),',%')
        or s.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or s.BELONGTO_DEPTS = 'ALL_DEPT'

        or s.VIEW_DEPTS like CONCAT(CONCAT('%',#{viewDepts}),',%')
        or s.VIEW_DEPTS like CONCAT(#{viewDepts},',%')
        or s.VIEW_DEPTS = 'ALL_DEPT'

        or s.VIEW_PRIVS like CONCAT(CONCAT('%',#{viewPrivs}),',%')
        or s.VIEW_USERS like CONCAT(CONCAT('%',#{viewUsers}),',%')
        )
      </if>

      <if test="approveStatus!=null and approveStatus!=''">
        and c.APPROVE_STATUS = #{approveStatus}
      </if>

      <if test="instStatus!=null and instStatus!=''">
        and c.INST_STATUS = #{instStatus}
      </if>

      <if test="instType!=null and instType!=''">
        and c.INST_TYPE = #{instType}
      </if>

      <if test="flowId != null">
        and (
        c.FLOW_ID like CONCAT(CONCAT('%',#{flowId}),',%')
        or c.FLOW_ID like CONCAT(#{flowId},',%')
        )
      </if>
    </where>
  </select>

  <select id="getFlowNames" resultType="string" parameterType="map">
    SELECT
        GROUP_CONCAT(FLOW_NAME)
    from flow_type
    WHERE FLOW_ID in ( ${flowId} )
  </select>
  <select id="getContentData" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    c.*
    FROM `institution_content` AS c
    left join department dp on c.BELONGTO_UNIT=dp.DEPT_ID
    <where>
      AND (
      <trim suffixOverrides="OR">
        <if test="viewUsers!=null and viewUsers!=''">
          (
          c.VIEW_USERS LIKE concat("%,",#{viewUsers},",%") OR
          c.VIEW_USERS LIKE concat(#{viewUsers},",%")
          )
          OR
        </if>
        <if test="viewDepts!=null">
          (
          c.VIEW_DEPTS LIKE concat("%,",#{viewDepts},",%") OR
          c.VIEW_DEPTS LIKE concat(#{viewDepts},",%") OR
          c.VIEW_DEPTS = 'ALL_DEPT'
          )
          OR
        </if>
        <if test="viewPrivs!=null">
          (
          c.VIEW_PRIVS LIKE concat("%,",#{viewPrivs},",%") OR
          c.VIEW_PRIVS LIKE concat(#{viewPrivs},",%")
          )
          OR
        </if>
        <if test="viewUserType!=null">
          (
          c.VIEW_USER_TYPE LIKE concat("%,",#{viewUserType},",%") OR
          c.VIEW_USER_TYPE LIKE concat(#{viewUserType},",%")
          )
          OR
        </if>
      </trim>
      )
      <if test="viewScope!=null and viewScope!=''">
        and dp.DEPT_TYPE=#{viewScope}
      </if>
      <if test="sortIds!=null">
       and c.SORT_ID in
        <foreach collection="sortIds" item="sortIds" open="(" separator="," close=")">
          #{sortIds}
        </foreach>
      </if>
      <if test="obj.approvalUser!=null and obj.approvalUser!=''">
        and (
        c.APPROVAL_USER like CONCAT(#{approvalUser},',%')
        or c.APPROVAL_USER = #{approvalUser}
        )
      </if>
      <if test="obj.sortId!=null">
        and c.SORT_ID = #{obj.sortId}
      </if>

      <if test="obj.approveStatus!=null and obj.approveStatus!=''">
        and c.APPROVE_STATUS = #{obj.approveStatus}
      </if>

      <if test="obj.instStatus!=null and obj.instStatus!=''">
        and c.INST_STATUS = #{obj.instStatus}
      </if>

      <if test="obj.instType!=null and obj.instType!=''">
        and c.INST_TYPE = #{obj.instType}
      </if>

      <if test="obj.instName!=null and obj.instName!=''">
        and ( c.INST_NAME like CONCAT('%',#{obj.instName},'%')
        or c.KEY_WORDS like CONCAT('%',#{obj.keyWords},'%')
        )
      </if>
      <if test="obj.flowId != null">
        and c.FLOW_ID = #{obj.flowId}
      </if>

      <if test="obj.userIds != null and obj.userIds != '' ">
        and (
        c.USER_IDS like CONCAT('%',#{obj.userIds},',%')
        or c.USER_IDS like CONCAT(#{obj.userIds},',%')
        )
      </if>
    </where>
    <if test="orders != null and orders==1">
      order by c.INST_NO
    </if>
    <if test="orders != null and orders==2">
      order by c.READER_NUM+0 desc
    </if>
    <if test="orders != null and orders==3">
      order by c.CREATE_TIME
    </if>
    GROUP BY
    c.INST_NUMBER
    ORDER BY CREATE_TIME DESC
    LIMIT #{page} ,#{pageSize}
  </select>


  <select id="getContentDataBySortId" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    c.*
    FROM `institution_content` AS c
    left join department dp on c.BELONGTO_UNIT=dp.DEPT_ID
    where 1=1
    <if test="sortId != null and sortId != ''">
      AND c.SORT_ID = #{sortId}
    </if>
    <if test="instName!=null and instName!=''">
      and ( c.INST_NAME like CONCAT('%',#{instName},'%')
      or c.KEY_WORDS like CONCAT('%',#{instName},'%')
      )
    </if>
    <if test="instStatus!=null and instStatus!=''">
      and c.INST_STATUS = #{instStatus}
    </if>
    <if test="approveStatus!=null and approveStatus!=''">
      and c.APPROVE_STATUS = #{approveStatus}
    </if>
    GROUP BY
    c.INST_NUMBER
    ORDER BY CREATE_TIME DESC
    LIMIT #{page} ,#{pageSize}
  </select>

  <select id="getContentDataBySortIdCount" resultType="int" parameterType="map">
    SELECT
    count( * )
    FROM
    (
    SELECT
    c.INST_ID
    FROM
    `institution_content` AS c
    LEFT JOIN department dp ON c.BELONGTO_UNIT = dp.DEPT_ID
    where 1=1
    <if test="sortId != null and sortId != ''">
      AND c.SORT_ID = #{sortId}
    </if>
    <if test="instName!=null and instName!=''">
      and ( c.INST_NAME like CONCAT('%',#{instName},'%')
      or c.KEY_WORDS like CONCAT('%',#{instName},'%')
      )
    </if>
    <if test="instStatus!=null and instStatus!=''">
      and c.INST_STATUS = #{instStatus}
    </if>
    <if test="approveStatus!=null and approveStatus!=''">
      and c.APPROVE_STATUS = #{approveStatus}
    </if>
    GROUP BY
    c.INST_NUMBER
    ORDER BY
    CREATE_TIME DESC
    ) t
  </select>

  <select id="getContentDataCount" resultType="int" parameterType="map">
    select
    count(*) from (
    select
    c.INST_ID
    FROM `institution_content` AS c
    left join department dp on c.BELONGTO_UNIT=dp.DEPT_ID
    <where>
      AND (
      <trim suffixOverrides="OR">
        <if test="viewUsers!=null and viewUsers!=''">
          (
          c.VIEW_USERS LIKE concat("%,",#{viewUsers},",%") OR
          c.VIEW_USERS LIKE concat(#{viewUsers},",%")
          )
          OR
        </if>
        <if test="viewDepts!=null">
          (
          c.VIEW_DEPTS LIKE concat("%,",#{viewDepts},",%") OR
          c.VIEW_DEPTS LIKE concat(#{viewDepts},",%") OR
          c.VIEW_DEPTS = 'ALL_DEPT'
          )
          OR
        </if>
        <if test="viewPrivs!=null">
          (
          c.VIEW_PRIVS LIKE concat("%,",#{viewPrivs},",%") OR
          c.VIEW_PRIVS LIKE concat(#{viewPrivs},",%")
          )
          OR
        </if>
        <if test="viewUserType!=null ">
            (
          c.VIEW_USER_TYPE LIKE concat("%,",#{viewUserType},",%") OR
          c.VIEW_USER_TYPE LIKE concat(#{viewUserType},",%")
          )
          OR
        </if>
      </trim>
      )
      <if test="viewScope!=null and viewScope!=''">
        and dp.DEPT_TYPE=#{viewScope}
      </if>
      <if test="sortIds!=null">
        and c.SORT_ID in
        <foreach collection="sortIds" item="sortIds" open="(" separator="," close=")">
          #{sortIds}
        </foreach>
      </if>
      <if test="obj.approvalUser!=null and obj.approvalUser!=''">
        and (
        c.APPROVAL_USER like CONCAT(#{approvalUser},',%')
        or c.APPROVAL_USER = #{approvalUser}
        )
      </if>
      <if test="obj.sortId!=null">
        and c.SORT_ID = #{obj.sortId}
      </if>

      <if test="obj.approveStatus!=null and obj.approveStatus!=''">
        and c.APPROVE_STATUS = #{obj.approveStatus}
      </if>

      <if test="obj.instStatus!=null and obj.instStatus!=''">
        and c.INST_STATUS = #{obj.instStatus}
      </if>

      <if test="obj.instType!=null and obj.instType!=''">
        and c.INST_TYPE = #{obj.instType}
      </if>

      <if test="obj.instName!=null and obj.instName!=''">
        and ( c.INST_NAME like CONCAT('%',#{obj.instName},'%')
        or c.KEY_WORDS like CONCAT('%',#{obj.keyWords},'%')
        )
      </if>
      <if test="obj.flowId != null">
        and c.FLOW_ID = #{obj.flowId}
      </if>

      <if test="obj.userIds != null and obj.userIds != '' ">
        and (
        c.USER_IDS like CONCAT('%',#{obj.userIds},',%')
        or c.USER_IDS like CONCAT(#{obj.userIds},',%')
        )
      </if>
    </where>
    <if test="orders != null and orders==1">
      order by c.INST_NO
    </if>
    <if test="orders != null and orders==2">
      order by c.READER_NUM+0 desc
    </if>
    <if test="orders != null and orders==3">
      order by c.CREATE_TIME
    </if>
    GROUP BY
    c.INST_NUMBER
    ORDER BY CREATE_TIME DESC
    )t
  </select>
  <select id="getByBelongDept" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    c.*
    FROM ( SELECT * FROM ( SELECT * FROM `institution_content` ORDER BY CREATE_TIME DESC ) AS a GROUP BY a.INST_NUMBER )
    AS c
    <where>
      <if test="instName!=null and instName!=''">
        and ( c.INST_NAME like CONCAT('%',#{instName},'%')
        or c.KEY_WORDS like CONCAT('%',#{instName},'%')
        )
      </if>
      <if test="belongtoDepts!= null">
        and (
        c.BELONGTO_DEPTS like CONCAT(#{belongtoDepts},',%')
        or c.BELONGTO_DEPTS like CONCAT('%,',#{belongtoDepts},',%')
        )
      </if>
      <if test="ownerUser!= null and ownerUser != '' ">
        and (
        c.OWNER_USER = #{ownerUser}
        )
      </if>
    </where>
    order by c.CREATE_TIME
  </select>
  <select id="getByApprovalUser" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    c.*
    FROM institution_content AS c
    <where>
      <if test="instName!=null and instName!=''">
        and ( c.INST_NAME like CONCAT('%',#{instName},'%')
        or c.KEY_WORDS like CONCAT('%',#{instName},'%')
        )
      </if>
      <if test="approvalUser!= null and approvalUser != '' ">
        or (
        c.APPROVAL_USER like CONCAT('%',#{approvalUser},'%')
        )
      </if>
      <if test="status !=null and status=='0'.toString()">
        AND (
        c.APPROVE_STATUS =0
        )
      </if>
      <if test="status !=null and status=='1'.toString()">
        AND (
        c.APPROVE_STATUS in(1,2)
        )
      </if>
    </where>
    order by c.CREATE_TIME DESC
  </select>
  <update id="saveInstNumberNoOut" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs">
    update institution_content
    set INST_NUMBER_OUT = #{instNumberOut,jdbcType=VARCHAR}  where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <update id="updateInstStatus" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs">
    update institution_content
    set INST_STATUS = #{instStatus,jdbcType=CHAR} where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <update id="saveBasicData" parameterType="com.xoa.model.institution.InstitutionContentWithBLOBs">
    update institution_content
    set
    INST_NUMBER = #{instNumber,jdbcType=VARCHAR},
    INST_NUMBER_OUT = #{instNumberOut,jdbcType=VARCHAR},
    KEY_WORDS = #{keyWords,jdbcType=VARCHAR},
    BELONGTO_DEPTS = #{belongtoDepts,jdbcType=VARCHAR},
    BELONGTO_UNIT = #{belongtoUnit,jdbcType=VARCHAR},
    VIEW_DEPTS = #{viewDepts,jdbcType=VARCHAR},
    VIEW_PRIVS = #{viewPrivs,jdbcType=VARCHAR},
    VIEW_USERS = #{viewUsers,jdbcType=VARCHAR},
    FLOW_ID = #{flowId,jdbcType=VARCHAR},
    VIEW_USER_TYPE = #{viewUserType,jdbcType=VARCHAR}
    where INST_ID = #{instId,jdbcType=INTEGER}
  </update>
  <select id="getByOwnerUser" resultMap="ResultMapWithBLOBs" parameterType="map">
    select
    *
    FROM  `institution_content`
    <where>
      <if test="ownerUser!= null and ownerUser != '' ">
        AND OWNER_USER = #{ownerUser}
      </if>
      <if test="instName != null and instName != '' ">
        AND INST_NAME like CONCAT('%',#{instName},'%')
      </if>
    </where>
    order by CREATE_TIME DESC
  </select>
</mapper>