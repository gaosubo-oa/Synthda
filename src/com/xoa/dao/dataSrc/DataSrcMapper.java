package com.xoa.dao.dataSrc;

import com.xoa.model.dataSrc.DataSrc;
import com.xoa.model.dataSrc.DataSrcExample;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface DataSrcMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int countByExample(DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int deleteByExample(DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer dId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int insert(DataSrc record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int insertSelective(DataSrc record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    List<DataSrc> selectByExampleWithBLOBs(DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    List<DataSrc> selectByExample(DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    DataSrc selectByPrimaryKey(Integer dId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") DataSrc record, @Param("example") DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByExampleWithBLOBs(@Param("record") DataSrc record, @Param("example") DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") DataSrc record, @Param("example") DataSrcExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(DataSrc record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(DataSrc record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table data_src
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(DataSrc record);

    /**
     * 查询数据源名称 like
     * @param map
     * @return
     */
    List<DataSrc> selectTerpServerByLike(Map map);

      /*
      * 创建作者:   廉立深
      * 创建日期:   12:44 2019/12/23
      * 方法介绍:   查询某个表的行数和占用内存大小
      * 参数说明:   [map]
      * @return     com.xoa.model.dataSrc.DataSrc
      */
    DataSrc findTableSize(Map map);


    //查询表是否存在
    int countTable(Map map);


    /**
     * 删除内部展示数据源
     * @param dID
     * @return
     */
    int deleteTerpServerTwo(Integer dID);

    /**
     * 浏览当前点击数据源的信息
     * @param dID
     * @return
     */
    DataSrc selectTerpServerBydID(Integer dID);


    /**
     * 新建数据源 数据库创建表
     * @param map
     * @return
     */
    int CreateTerpServerTable(Map map);


    /**
     * 获取该表所有的列
     * @param map
     * @return
     */
    List<String> showColumns(Map<String,Object> map);

    /**
     * 编辑数据源描述更改
     * @param map
     * @return
     */
   /* boolean updatedDesc(Map map);*/

    /**
     * 向新建的表中添加字段
     * @param map
     * @return
     */
    /*boolean alterTableField(Map map);*/

    /**
     * 为该字段添加唯一性约束
     * @param map
     * @return
     */
//    boolean onlyYesAndNo(Map map);

    /**
     * 编辑数据源字段（更改信息）
     * @param map
     * @return
     */
//    boolean updataTerpServerField(Map map);

    /**
     * 删除创建的数据源信息
     * @param map
     * @return
     */
    int dropTableField(Map map);

    /**
     * 清空表中所有信息
     * @param tableName
     * @return
     */
    int delectTableAllData(@Param("tableName")String tableName);

    //删除表
    int deleteTable(@Param("TabName") String TabName);

    //查找表结构
    List findByDataSrcId(Map map);

    //公共查询方式传入表名
    List<Map<String,Object>> selectTableAll(Map map);

    //公共新增方法
    int insertdata(Map map);

    //公共修改方法
    int updateData(Map map);

    //删除字段方法
    int delField(Map map);

    //修改字段
    int updataField(Map map);

    //新增字段
    int insertField(Map map);

    //修改索引mysql没有修改索引只能删除重新创建
    int updateIndex(Map map);
    int delIndex(Map map);

    //查询库中所有表结构
    List firstDBSource(@Param("tableSchema") String firstDBSource);

    //查询某个库中的所有表  返回表名
    String findDbName(@Param("name") String name, @Param("tabName") String tabName);

    String findDbTabName(@Param("sqlType") String sqlType, @Param("tabName") String tabName, @Param("column") String column);

    //获取指定表的外键数据字段
    String getConstraintKey(@Param("sqlType") String sqlType, @Param("tabName") String tabName);

    //根据某些数据去检索数据库是否已包含此项数据
    Integer getDataCount(@Param("tabName") String tabName, @Param("column") String column, @Param("columnValue") String columnValue);
}