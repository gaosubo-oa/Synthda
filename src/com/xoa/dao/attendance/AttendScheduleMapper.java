package com.xoa.dao.attendance;

import com.xoa.model.attendance.AttendSchedule;
import com.xoa.model.attendance.AttendScheduleWithBLOBs;
import com.xoa.model.users.Users;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface AttendScheduleMapper {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer asid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int insert(AttendScheduleWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int insertSelective(AttendScheduleWithBLOBs record);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    AttendScheduleWithBLOBs selectByPrimaryKey(Integer asid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(AttendScheduleWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(AttendScheduleWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table attend_schedule
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(AttendSchedule record);

    /**
     * 获取全部排班
     * @return
     */
    List<AttendScheduleWithBLOBs> selectAttendScheduleList();

    /**
     * 是否启用？0：否 1：是
     */
    int updateAttendScheduleStatus(@Param("asid") Integer asid,@Param("status") Integer status);

    /**
     * 自由排班查询(通过部门)
     * @param deptId
     * @return
     */
    List<Users> freedomScheduleQueryByDept(@Param("deptId") Map deptId);

    int freedomScheduleQueryByDeptCount(@Param("deptIds") String[] deptIds);
    /**
     * 自由排班查询(通过人员)
     * @param userId
     * @return
     */
    List<Users> freedomScheduleQueryByUser(@Param("userId") Map userId);

   int freedomScheduleQueryByUserCount(@Param("userIds") String[] userId);

    /**
     * 获取启动的排班
     */
    List<AttendScheduleWithBLOBs> getStatusOneAttendSchedule();

    /**
     * 获取部门下人员
     */
    public List<Integer> getUidListByDeptIds(@Param("deptMap") Map map);

    /**
     * 获取角色下人员
     */
    public List<Integer> getUidListByPrivIds(@Param("privMap") Map map);

    /**
     * 获取UserIds人员
     */
    public List<Integer> getUidListByUserIds(String [] userIds);

    /**
     * 通过类型查找排班对象
     * @param dutyType
     * @return
     */
    public AttendScheduleWithBLOBs getAttendScheduleByUserDutyType(Integer dutyType);

    /**
     * 获取所有的uid
     * @return
     */
    public List<Integer> getUidAll(@Param("uidMap") Map map);
    //获取部门名
    List<String> getDeptNames(String deptId);
    //获取角色名
    List<String> getprivNames(String privId);
    //获取用户名
    List<String> getuserNames(String userId);

    //根据map条件获取数据
    List<AttendScheduleWithBLOBs> getAttendScheduleByMap(Map map);

    //查看是否有冲突
    List<AttendScheduleWithBLOBs> getAttendScheduleClash(Map map);

    List<AttendScheduleWithBLOBs> selectAttendScheduleClash(Map map);
}