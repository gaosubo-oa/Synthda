package com.xoa.dao.institution;

import com.xoa.model.institution.InstitutionContent;
import com.xoa.model.institution.InstitutionContentExample;
import com.xoa.model.institution.InstitutionContentWithBLOBs;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface InstitutionContentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int countByExample(InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int deleteByExample(InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer instId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int insert(InstitutionContentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int insertSelective(InstitutionContentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    List<InstitutionContentWithBLOBs> selectByExampleWithBLOBs(InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    List<InstitutionContent> selectByExample(InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    InstitutionContentWithBLOBs selectByPrimaryKey(Integer instId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") InstitutionContentWithBLOBs record, @Param("example") InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByExampleWithBLOBs(@Param("record") InstitutionContentWithBLOBs record, @Param("example") InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") InstitutionContent record, @Param("example") InstitutionContentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(InstitutionContentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(InstitutionContentWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table institution_content
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(InstitutionContent record);

    //条件查询
    List<InstitutionContentWithBLOBs> findContentWhere(Map map);

    //查询历史记录
    List<InstitutionContentWithBLOBs> findContentHistory(Map map);

    //查找有权限的用户,根据部门，角色，用户，串查询userId
    String findContenUser(@Param("belongtoDepts") String belongtoDepts, @Param("viewDepts") String viewDepts,@Param("viewPrivs") String viewPrivs,@Param("viewUsers") String viewUsers);

    //判断编号是否重复
    int isVersion(@Param("instNumber") String instNumber, @Param("version") String version);

    //查询HTML和FILE的URL
    List<InstitutionContentWithBLOBs> findContenHTMLORFILEURL(Map map);

    //根据IDS查询制度
    List<InstitutionContentWithBLOBs> findContentIds(@Param("ids") String ids);

    //查询文件
    Map<String, Object> getAttachmentIds(@Param("attachmentIds") String attachmentIds, @Param("instName") String instName);

    //统计部门和公司制度数量
    int countConten(Map map);

    //返回flowId串  查询相关制度
    String findContenFlowRun(Map map);

    //查询最近阅读
    List<InstitutionContentWithBLOBs> findRecentConten(Map map);

    //通过流程查找制度
    List<InstitutionContentWithBLOBs> getContenFlowRun(Map map);

    //根据flowID串查询flowName串
    String getFlowNames(Map map);

    //查询指定分类下数量
    int findBySortIdCount(@Param("sortId") Integer sortId);

    //获取当前登陆人可以查阅的制度--新版
    List<InstitutionContentWithBLOBs> getContentData(Map map);

    //根据分类获取所有数据，管理员操作，无权限控制
    List<InstitutionContentWithBLOBs> getContentDataBySortId(Map map);

    //根据分类获取所有数据，管理员操作，无权限控制         总数量
    int getContentDataBySortIdCount(Map map);

    //获取当前登陆人可以查阅的制度数量--新版
    int getContentDataCount(Map map);

    //获取当前登陆人可以查阅的制度
    List<InstitutionContentWithBLOBs> getByBelongDept(Map map);

    //制度审核--待审核，已审核数据
    List<InstitutionContentWithBLOBs> getByApprovalUser(Map map);

    //保存外控编号
    int saveInstNumberNoOut(InstitutionContentWithBLOBs record);

    //停用按钮
    int updateInstStatus(InstitutionContentWithBLOBs record);

    //停用按钮
    int saveBasicData(InstitutionContentWithBLOBs record);

    //获取当前登陆人发布的制度列表
    List<InstitutionContentWithBLOBs> getByOwnerUser(Map map);
}