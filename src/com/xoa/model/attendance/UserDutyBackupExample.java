package com.xoa.model.attendance;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class UserDutyBackupExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public UserDutyBackupExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andUdbidIsNull() {
            addCriterion("UDBID is null");
            return (Criteria) this;
        }

        public Criteria andUdbidIsNotNull() {
            addCriterion("UDBID is not null");
            return (Criteria) this;
        }

        public Criteria andUdbidEqualTo(Integer value) {
            addCriterion("UDBID =", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidNotEqualTo(Integer value) {
            addCriterion("UDBID <>", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidGreaterThan(Integer value) {
            addCriterion("UDBID >", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidGreaterThanOrEqualTo(Integer value) {
            addCriterion("UDBID >=", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidLessThan(Integer value) {
            addCriterion("UDBID <", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidLessThanOrEqualTo(Integer value) {
            addCriterion("UDBID <=", value, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidIn(List<Integer> values) {
            addCriterion("UDBID in", values, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidNotIn(List<Integer> values) {
            addCriterion("UDBID not in", values, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidBetween(Integer value1, Integer value2) {
            addCriterion("UDBID between", value1, value2, "udbid");
            return (Criteria) this;
        }

        public Criteria andUdbidNotBetween(Integer value1, Integer value2) {
            addCriterion("UDBID not between", value1, value2, "udbid");
            return (Criteria) this;
        }

        public Criteria andDutyIdIsNull() {
            addCriterion("DUTY_ID is null");
            return (Criteria) this;
        }

        public Criteria andDutyIdIsNotNull() {
            addCriterion("DUTY_ID is not null");
            return (Criteria) this;
        }

        public Criteria andDutyIdEqualTo(Integer value) {
            addCriterion("DUTY_ID =", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdNotEqualTo(Integer value) {
            addCriterion("DUTY_ID <>", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdGreaterThan(Integer value) {
            addCriterion("DUTY_ID >", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("DUTY_ID >=", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdLessThan(Integer value) {
            addCriterion("DUTY_ID <", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdLessThanOrEqualTo(Integer value) {
            addCriterion("DUTY_ID <=", value, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdIn(List<Integer> values) {
            addCriterion("DUTY_ID in", values, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdNotIn(List<Integer> values) {
            addCriterion("DUTY_ID not in", values, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdBetween(Integer value1, Integer value2) {
            addCriterion("DUTY_ID between", value1, value2, "dutyId");
            return (Criteria) this;
        }

        public Criteria andDutyIdNotBetween(Integer value1, Integer value2) {
            addCriterion("DUTY_ID not between", value1, value2, "dutyId");
            return (Criteria) this;
        }

        public Criteria andUidIsNull() {
            addCriterion("UID is null");
            return (Criteria) this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("UID is not null");
            return (Criteria) this;
        }

        public Criteria andUidEqualTo(Integer value) {
            addCriterion("UID =", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotEqualTo(Integer value) {
            addCriterion("UID <>", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThan(Integer value) {
            addCriterion("UID >", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Integer value) {
            addCriterion("UID >=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThan(Integer value) {
            addCriterion("UID <", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualTo(Integer value) {
            addCriterion("UID <=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidIn(List<Integer> values) {
            addCriterion("UID in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotIn(List<Integer> values) {
            addCriterion("UID not in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidBetween(Integer value1, Integer value2) {
            addCriterion("UID between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotBetween(Integer value1, Integer value2) {
            addCriterion("UID not between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andDutyTypeIsNull() {
            addCriterion("DUTY_TYPE is null");
            return (Criteria) this;
        }

        public Criteria andDutyTypeIsNotNull() {
            addCriterion("DUTY_TYPE is not null");
            return (Criteria) this;
        }

        public Criteria andDutyTypeEqualTo(Integer value) {
            addCriterion("DUTY_TYPE =", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeNotEqualTo(Integer value) {
            addCriterion("DUTY_TYPE <>", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeGreaterThan(Integer value) {
            addCriterion("DUTY_TYPE >", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("DUTY_TYPE >=", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeLessThan(Integer value) {
            addCriterion("DUTY_TYPE <", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeLessThanOrEqualTo(Integer value) {
            addCriterion("DUTY_TYPE <=", value, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeIn(List<Integer> values) {
            addCriterion("DUTY_TYPE in", values, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeNotIn(List<Integer> values) {
            addCriterion("DUTY_TYPE not in", values, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeBetween(Integer value1, Integer value2) {
            addCriterion("DUTY_TYPE between", value1, value2, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("DUTY_TYPE not between", value1, value2, "dutyType");
            return (Criteria) this;
        }

        public Criteria andDutyDateIsNull() {
            addCriterion("DUTY_DATE is null");
            return (Criteria) this;
        }

        public Criteria andDutyDateIsNotNull() {
            addCriterion("DUTY_DATE is not null");
            return (Criteria) this;
        }

        public Criteria andDutyDateEqualTo(Date value) {
            addCriterionForJDBCDate("DUTY_DATE =", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("DUTY_DATE <>", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateGreaterThan(Date value) {
            addCriterionForJDBCDate("DUTY_DATE >", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("DUTY_DATE >=", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateLessThan(Date value) {
            addCriterionForJDBCDate("DUTY_DATE <", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("DUTY_DATE <=", value, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateIn(List<Date> values) {
            addCriterionForJDBCDate("DUTY_DATE in", values, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("DUTY_DATE not in", values, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("DUTY_DATE between", value1, value2, "dutyDate");
            return (Criteria) this;
        }

        public Criteria andDutyDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("DUTY_DATE not between", value1, value2, "dutyDate");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user_duty_backup
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table user_duty_backup
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}