package com.xoa.model.officesupplies;

import java.util.ArrayList;
import java.util.List;

public class OfficeTypeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table office_type
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table office_type
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table office_type
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public OfficeTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table office_type
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTypeNameIsNull() {
            addCriterion("TYPE_NAME is null");
            return (Criteria) this;
        }

        public Criteria andTypeNameIsNotNull() {
            addCriterion("TYPE_NAME is not null");
            return (Criteria) this;
        }

        public Criteria andTypeNameEqualTo(String value) {
            addCriterion("TYPE_NAME =", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotEqualTo(String value) {
            addCriterion("TYPE_NAME <>", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThan(String value) {
            addCriterion("TYPE_NAME >", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameGreaterThanOrEqualTo(String value) {
            addCriterion("TYPE_NAME >=", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThan(String value) {
            addCriterion("TYPE_NAME <", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameLessThanOrEqualTo(String value) {
            addCriterion("TYPE_NAME <=", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameLike(String value) {
            addCriterion("TYPE_NAME like", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotLike(String value) {
            addCriterion("TYPE_NAME not like", value, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameIn(List<String> values) {
            addCriterion("TYPE_NAME in", values, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotIn(List<String> values) {
            addCriterion("TYPE_NAME not in", values, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameBetween(String value1, String value2) {
            addCriterion("TYPE_NAME between", value1, value2, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeNameNotBetween(String value1, String value2) {
            addCriterion("TYPE_NAME not between", value1, value2, "typeName");
            return (Criteria) this;
        }

        public Criteria andTypeOrderIsNull() {
            addCriterion("TYPE_ORDER is null");
            return (Criteria) this;
        }

        public Criteria andTypeOrderIsNotNull() {
            addCriterion("TYPE_ORDER is not null");
            return (Criteria) this;
        }

        public Criteria andTypeOrderEqualTo(String value) {
            addCriterion("TYPE_ORDER =", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderNotEqualTo(String value) {
            addCriterion("TYPE_ORDER <>", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderGreaterThan(String value) {
            addCriterion("TYPE_ORDER >", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderGreaterThanOrEqualTo(String value) {
            addCriterion("TYPE_ORDER >=", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderLessThan(String value) {
            addCriterion("TYPE_ORDER <", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderLessThanOrEqualTo(String value) {
            addCriterion("TYPE_ORDER <=", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderLike(String value) {
            addCriterion("TYPE_ORDER like", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderNotLike(String value) {
            addCriterion("TYPE_ORDER not like", value, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderIn(List<String> values) {
            addCriterion("TYPE_ORDER in", values, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderNotIn(List<String> values) {
            addCriterion("TYPE_ORDER not in", values, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderBetween(String value1, String value2) {
            addCriterion("TYPE_ORDER between", value1, value2, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeOrderNotBetween(String value1, String value2) {
            addCriterion("TYPE_ORDER not between", value1, value2, "typeOrder");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdIsNull() {
            addCriterion("TYPE_PARENT_ID is null");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdIsNotNull() {
            addCriterion("TYPE_PARENT_ID is not null");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdEqualTo(Integer value) {
            addCriterion("TYPE_PARENT_ID =", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdNotEqualTo(Integer value) {
            addCriterion("TYPE_PARENT_ID <>", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdGreaterThan(Integer value) {
            addCriterion("TYPE_PARENT_ID >", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("TYPE_PARENT_ID >=", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdLessThan(Integer value) {
            addCriterion("TYPE_PARENT_ID <", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdLessThanOrEqualTo(Integer value) {
            addCriterion("TYPE_PARENT_ID <=", value, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdIn(List<Integer> values) {
            addCriterion("TYPE_PARENT_ID in", values, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdNotIn(List<Integer> values) {
            addCriterion("TYPE_PARENT_ID not in", values, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdBetween(Integer value1, Integer value2) {
            addCriterion("TYPE_PARENT_ID between", value1, value2, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeParentIdNotBetween(Integer value1, Integer value2) {
            addCriterion("TYPE_PARENT_ID not between", value1, value2, "typeParentId");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryIsNull() {
            addCriterion("TYPE_DEPOSITORY is null");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryIsNotNull() {
            addCriterion("TYPE_DEPOSITORY is not null");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryEqualTo(Integer value) {
            addCriterion("TYPE_DEPOSITORY =", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryNotEqualTo(Integer value) {
            addCriterion("TYPE_DEPOSITORY <>", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryGreaterThan(Integer value) {
            addCriterion("TYPE_DEPOSITORY >", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryGreaterThanOrEqualTo(Integer value) {
            addCriterion("TYPE_DEPOSITORY >=", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryLessThan(Integer value) {
            addCriterion("TYPE_DEPOSITORY <", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryLessThanOrEqualTo(Integer value) {
            addCriterion("TYPE_DEPOSITORY <=", value, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryIn(List<Integer> values) {
            addCriterion("TYPE_DEPOSITORY in", values, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryNotIn(List<Integer> values) {
            addCriterion("TYPE_DEPOSITORY not in", values, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryBetween(Integer value1, Integer value2) {
            addCriterion("TYPE_DEPOSITORY between", value1, value2, "typeDepository");
            return (Criteria) this;
        }

        public Criteria andTypeDepositoryNotBetween(Integer value1, Integer value2) {
            addCriterion("TYPE_DEPOSITORY not between", value1, value2, "typeDepository");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table office_type
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table office_type
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}