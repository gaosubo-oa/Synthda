<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dev.crossEmail.dao.EmailPlusMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.dev.crossEmail.model.EmailPlus" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="EMAIL_ID" property="emailId" jdbcType="INTEGER" />
    <result column="TO_ID" property="toId" jdbcType="VARCHAR" />
    <result column="READ_FLAG" property="readFlag" jdbcType="CHAR" />
    <result column="DELETE_FLAG" property="deleteFlag" jdbcType="CHAR" />
    <result column="BOX_ID" property="boxId" jdbcType="INTEGER" />
    <result column="BODY_ID" property="bodyId" jdbcType="INTEGER" />
    <result column="RECEIPT" property="receipt" jdbcType="CHAR" />
    <result column="IS_F" property="isF" jdbcType="CHAR" />
    <result column="IS_R" property="isR" jdbcType="CHAR" />
    <result column="SIGN" property="sign" jdbcType="CHAR" />
    <result column="withdraw_flag" property="withdrawFlag" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="BaseResultMap2" type="com.xoa.dev.crossEmail.model.EmailPlusModel" >
    <result column="EMAIL_ID" property="emailId" javaType="INTEGER" />
    <result column="TO_ID" property="toId" javaType="String" />
    <result column="READ_FLAG" property="readFlag" javaType="String" />
    <result column="DELETE_FLAG" property="deleteFlag" javaType="String" />
    <result column="BOX_ID" property="boxId" javaType="INTEGER" />
    <result column="BODY_ID" property="bodyId" javaType="INTEGER" />
    <result column="RECEIPT" property="receipt" javaType="String" />
    <result column="IS_F" property="isF" javaType="String" />
    <result column="IS_R" property="isR" javaType="String" />
    <result column="SIGN" property="sign" javaType="String" />
    <result column="withdraw_flag" property="withdrawFlag" javaType="String" />
  </resultMap>

  <resultMap id="BaseResultMapWithName" type="com.xoa.dev.crossEmail.model.EmailPlusModel" extends="BaseResultMap2" >
    <result column="USER_NAME" property="userName" javaType="String" />
    <result column="DEPT_NAME" property="deptName" javaType="String" />
    <result column="UID" property="UID" javaType="String" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    EMAIL_ID, TO_ID, READ_FLAG, DELETE_FLAG, BOX_ID, BODY_ID, RECEIPT, IS_F, IS_R, SIGN,
    withdraw_flag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap2" parameterType="com.xoa.dev.crossEmail.model.EmailPlusExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emailplus
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.xoa.dev.crossEmail.model.EmailPlusExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from emailplus
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.dev.crossEmail.model.EmailPlus" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into emailplus (EMAIL_ID, TO_ID, READ_FLAG,
    DELETE_FLAG, BOX_ID, BODY_ID,
    RECEIPT, IS_F, IS_R, SIGN,
    withdraw_flag)
    values (#{emailId,jdbcType=INTEGER}, #{toId,jdbcType=VARCHAR}, #{readFlag,jdbcType=CHAR},
    #{deleteFlag,jdbcType=CHAR}, #{boxId,jdbcType=INTEGER}, #{bodyId,jdbcType=INTEGER},
    #{receipt,jdbcType=CHAR}, #{isF,jdbcType=CHAR}, #{isR,jdbcType=CHAR}, #{sign,jdbcType=CHAR},
    #{withdrawFlag,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.dev.crossEmail.model.EmailPlus" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into emailplus
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="emailId != null" >
        EMAIL_ID,
      </if>
      <if test="toId != null" >
        TO_ID,
      </if>
      <if test="readFlag != null" >
        READ_FLAG,
      </if>
      <if test="deleteFlag != null" >
        DELETE_FLAG,
      </if>
      <if test="boxId != null" >
        BOX_ID,
      </if>
      <if test="bodyId != null" >
        BODY_ID,
      </if>
      <if test="receipt != null" >
        RECEIPT,
      </if>
      <if test="isF != null" >
        IS_F,
      </if>
      <if test="isR != null" >
        IS_R,
      </if>
      <if test="sign != null" >
        SIGN,
      </if>
      <if test="withdrawFlag != null" >
        withdraw_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="emailId != null" >
        #{emailId,jdbcType=INTEGER},
      </if>
      <if test="toId != null" >
        #{toId,jdbcType=VARCHAR},
      </if>
      <if test="readFlag != null" >
        #{readFlag,jdbcType=CHAR},
      </if>
      <if test="deleteFlag != null" >
        #{deleteFlag,jdbcType=CHAR},
      </if>
      <if test="boxId != null" >
        #{boxId,jdbcType=INTEGER},
      </if>
      <if test="bodyId != null" >
        #{bodyId,jdbcType=INTEGER},
      </if>
      <if test="receipt != null" >
        #{receipt,jdbcType=CHAR},
      </if>
      <if test="isF != null" >
        #{isF,jdbcType=CHAR},
      </if>
      <if test="isR != null" >
        #{isR,jdbcType=CHAR},
      </if>
      <if test="sign != null" >
        #{sign,jdbcType=CHAR},
      </if>
      <if test="withdrawFlag != null" >
        #{withdrawFlag,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xoa.dev.crossEmail.model.EmailPlusExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from emailplus
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update emailplus
    <set >
      <if test="record.emailId != null" >
        EMAIL_ID = #{record.emailId,jdbcType=INTEGER},
      </if>
      <if test="record.toId != null" >
        TO_ID = #{record.toId,jdbcType=VARCHAR},
      </if>
      <if test="record.readFlag != null" >
        READ_FLAG = #{record.readFlag,jdbcType=CHAR},
      </if>
      <if test="record.deleteFlag != null" >
        DELETE_FLAG = #{record.deleteFlag,jdbcType=CHAR},
      </if>
      <if test="record.boxId != null" >
        BOX_ID = #{record.boxId,jdbcType=INTEGER},
      </if>
      <if test="record.bodyId != null" >
        BODY_ID = #{record.bodyId,jdbcType=INTEGER},
      </if>
      <if test="record.receipt != null" >
        RECEIPT = #{record.receipt,jdbcType=CHAR},
      </if>
      <if test="record.isF != null" >
        IS_F = #{record.isF,jdbcType=CHAR},
      </if>
      <if test="record.isR != null" >
        IS_R = #{record.isR,jdbcType=CHAR},
      </if>
      <if test="record.sign != null" >
        SIGN = #{record.sign,jdbcType=CHAR},
      </if>
      <if test="record.withdrawFlag != null" >
        withdraw_flag = #{record.withdrawFlag,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update emailplus
    set EMAIL_ID = #{record.emailId,jdbcType=INTEGER},
    TO_ID = #{record.toId,jdbcType=VARCHAR},
    READ_FLAG = #{record.readFlag,jdbcType=CHAR},
    DELETE_FLAG = #{record.deleteFlag,jdbcType=CHAR},
    BOX_ID = #{record.boxId,jdbcType=INTEGER},
    BODY_ID = #{record.bodyId,jdbcType=INTEGER},
    RECEIPT = #{record.receipt,jdbcType=CHAR},
    IS_F = #{record.isF,jdbcType=CHAR},
    IS_R = #{record.isR,jdbcType=CHAR},
    SIGN = #{record.sign,jdbcType=CHAR},
    withdraw_flag = #{record.withdrawFlag,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <insert id="save" parameterType="com.xoa.dev.crossEmail.model.EmailPlusModel" useGeneratedKeys="true" keyProperty="emailId" >
    <selectKey order="AFTER" keyProperty="emailId" resultType="int">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into emailplus (TO_ID, READ_FLAG,
    DELETE_FLAG, BOX_ID, BODY_ID,
    RECEIPT, IS_F, IS_R, SIGN
    )
    values ( #{toId}, #{readFlag},
    #{deleteFlag}, #{boxId}, #{bodyId},
    #{receipt}, #{isF}, #{isR}, #{sign}
    )
  </insert>

  <insert id="save" parameterType="com.xoa.dev.crossEmail.model.EmailPlusModel" useGeneratedKeys="true" keyProperty="emailId" databaseId="kingbase">
    insert into emailplus (TO_ID, READ_FLAG,
    DELETE_FLAG, BOX_ID, BODY_ID,
    RECEIPT, IS_F, IS_R, SIGN
    )
    values ( #{toId}, #{readFlag},
    #{deleteFlag}, #{boxId}, #{bodyId},
    #{receipt}, #{isF}, #{isR}, #{sign}
    )
    RETURNING EMAIL_ID
  </insert>


  <!-- 未读转为已读 -->
  <update id="updateIsRead" parameterType="com.xoa.dev.crossEmail.model.EmailPlusModel">
    update emailplus set READ_FLAG=#{readFlag} where EMAIL_ID=#{emailId}
  </update>

  <!-- 建立外部邮件关联关系 -->
  <update id="updateEmailBox" parameterType="com.xoa.dev.crossEmail.model.EmailPlusModel">
    UPDATE emailplus e
    SET e.BOX_ID = #{boxId}
    WHERE
    e.EMAIL_ID = #{emailId}
    AND
    e.TO_ID = #{toId}
  </update>


  <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map">
    SELECT e.*,u.USER_NAME,d.DEPT_NAME FROM emailplus e INNER JOIN
    `user`  u ON u.USER_ID =e.TO_ID
    INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
    WHERE e.TO_ID in
    <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
      #{userId}
    </foreach>
    AND   e.BODY_ID=#{bodyId}  GROUP BY e.TO_ID
  </select>

  <select id="selectUserReadFlag" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="kingbase">
    SELECT e.*,u.USER_NAME,d.DEPT_NAME FROM emailplus e INNER JOIN
    "USER"  u ON u.USER_ID =e.TO_ID
    INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
    WHERE e.TO_ID in
    <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
      #{userId}
    </foreach>
    AND   e.BODY_ID=#{bodyId}  ORDER BY e.TO_ID
  </select>


  <select id="selectUserReadFlag1" resultMap="BaseResultMapWithName" parameterType="Map">
    SELECT e.*,u.UID,u.USER_NAME,d.DEPT_NAME FROM emailplus e INNER JOIN
    `user`  u ON u.USER_ID =e.TO_ID
    INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
    WHERE e.TO_ID in
    <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
      #{userId}
    </foreach>
    AND   e.BODY_ID=#{bodyId}  GROUP BY e.TO_ID
  </select>

  <select id="selectUserReadFlag1" resultMap="BaseResultMapWithName" parameterType="Map" databaseId="kingbase">
    SELECT e.*,u.UID,u.USER_NAME,d.DEPT_NAME FROM emailplus e INNER JOIN
    "USER"  u ON u.USER_ID =e.TO_ID
    INNER JOIN department d ON d.DEPT_ID =u.DEPT_ID
    WHERE e.TO_ID in
    <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
      #{userId}
    </foreach>
    AND   e.BODY_ID=#{bodyId}  ORDER BY e.TO_ID
  </select>


  <select id="queryByEmailOne" resultMap="BaseResultMap2">
    SELECT * FROM emailplus WHERE emailplus.EMAIL_ID=#{emailId}
  </select>

  <select id="selectByBodyId" parameterType="Map" resultMap="BaseResultMapWithName" >
    SELECT e.*,u.user_Name  from emailplus e,user u where u.user_id = e.to_id AND e.body_id = #{bodyId}
  </select>

  <update id="updateEmailWithdraw"  parameterType="Map">
    update emailplus set withdraw_flag=1 where BODY_ID= #{bodyId}
    <if test=" userIds!=null ">
      AND to_id in
      <foreach item="userId" collection="userIds"  open="(" separator="," close=")">
        #{userId}
      </foreach>
    </if>
  </update>

  <select id="selectEmailInboxCount" resultType="Integer" >
    SELECT
    count( * ),
    BOX_ID
    FROM
    `emailplus` FORCE INDEX ( USER_BOX )
    WHERE
    BOX_ID IN ( 0 )
    AND DELETE_FLAG IN ( '', '0', '2' )
    AND TO_ID = 'admin'
    GROUP BY
    `BOX_ID`;
  </select>

  <select id="selectEmailInboxCount" resultType="Integer" databaseId="kingbase" >
    SELECT
    count( * ),
    BOX_ID
    FROM
    emailplus
    WHERE
    BOX_ID IN ( 0 )
    AND DELETE_FLAG IN ( '', '0', '2' )
    AND TO_ID = 'admin'
    GROUP BY
    BOX_ID;
  </select>

  <select id="selectEmail" resultType="Integer"  >
        select  count(*)  from emailplus

    </select>
</mapper>